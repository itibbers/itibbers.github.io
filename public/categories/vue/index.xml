<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vue on itibbers</title>
    <link>https://itibbers.com/categories/vue/</link>
    <description>Recent content in Vue on itibbers</description>
    <image>
      <title>itibbers</title>
      <url>https://itibbers.com/og-image.png</url>
      <link>https://itibbers.com/og-image.png</link>
    </image>
    <generator>Hugo -- 0.147.9</generator>
    <language>en</language>
    <lastBuildDate>Thu, 22 Aug 2019 11:09:26 +0000</lastBuildDate>
    <atom:link href="https://itibbers.com/categories/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue methods vs watchers vs computed properties</title>
      <link>https://itibbers.com/posts/vue-watch-computed-method/</link>
      <pubDate>Thu, 22 Aug 2019 11:09:26 +0000</pubDate>
      <guid>https://itibbers.com/posts/vue-watch-computed-method/</guid>
      <description>&lt;p&gt;Vue.js provides us &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt; and &lt;code&gt;methods&lt;/code&gt; properties. When to use one vs the other?&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Vue.js provides us <code>watch</code>, <code>computed</code> and <code>methods</code> properties. When to use one vs the other?</p>
<blockquote>
<p>When to use methods</p></blockquote>
<ol>
<li>To react on some event happening in the DOM</li>
<li>To call a function when something happens in your component. You can call a methods from computed properties or watchers.</li>
</ol>
<blockquote>
<p>When to use computed properties</p></blockquote>
<ol>
<li>You need to compose new data from existing data sources</li>
<li>You have a variable you use in your template that’s built from one or more data properties</li>
<li>You want to reduce a complicated, nested property name to a more readable and easy to use one, yet update it when the original property changes</li>
<li>You need to reference a value from the template. In this case, creating a computed property is the best thing because it’s cached.</li>
<li>You need to listen to changes of more than one data property</li>
</ol>
<blockquote>
<p>When to use watchers</p></blockquote>
<ol>
<li>You want to listen when a data property changes, and perform some action</li>
<li>You want to listen to a prop value change</li>
<li>You only need to listen to one specific property (you can’t watch multiple properties at the same time)</li>
<li>You want to watch a data property until it reaches some specific value and then do something</li>
</ol>]]></content:encoded>
    </item>
    <item>
      <title>Vue组件通信与数据传递</title>
      <link>https://itibbers.com/posts/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</link>
      <pubDate>Mon, 19 Aug 2019 15:01:54 +0000</pubDate>
      <guid>https://itibbers.com/posts/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</guid>
      <description>&lt;p&gt;Vue 组件通信整理：&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Vue 组件通信整理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span># parent <span class="err">&amp;</span> child<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>props[$attrs <span class="err">&amp;</span> $listeners] $emit[.sync]<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>$parent $children/ref<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>eventBus<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>Vuex $root<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>slot<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>provide inject<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">parent-child</span> <span class="na">:name</span><span class="err">.</span><span class="na">sync</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="na">ref</span><span class="o">=</span><span class="s">&#34;parentChild&#34;</span> <span class="err">@</span><span class="na">say</span><span class="o">=</span><span class="s">&#34;receive&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">parent-child</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;childFn&#34;</span><span class="p">&gt;</span>What&#39;s your name, parent-child?<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  Change Name: <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span># child <span class="err">&amp;</span> child<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>子-&gt;父-&gt;子<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>eventBus<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>Vuex $root<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">child-brother</span><span class="p">&gt;&lt;/</span><span class="nt">child-brother</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">child-sister</span><span class="p">&gt;&lt;/</span><span class="nt">child-sister</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;parent-child&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 数据：父-&gt;子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">props</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">alertName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;I am &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">say</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;say&#39;</span><span class="p">,</span> <span class="s1">&#39;I am fine&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">parentFn</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">$parent</span><span class="p">.</span><span class="nx">receive</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;p&gt;Name: {{name}}&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;button @click=&#34;say&#34;&gt;Say something&lt;/button&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;button @click=&#34;parentFn&#34;&gt;Hello Parent?&lt;/button&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;button @click=&#34;$emit(&#39;update:name&#39;, &#39;Awesome Jack&#39;)&#34;&gt;Change name self&lt;/button&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;child-brother&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">eventBus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;talking&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;p&gt;brother&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;button @click=&#34;sayHello&#34;&gt;hello my sister&lt;/button&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;child-sister&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">eventBus</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;talking&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">words</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Received from brother: &#39;</span> <span class="o">+</span> <span class="nx">words</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;p&gt;sister waiting brother takling...&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">eventBus</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jack&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 事件：父-&gt;子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">childFn</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// $refs or $children
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">parentChild</span><span class="p">.</span><span class="nx">alertName</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">receive</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alert</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> said: </span><span class="si">${</span><span class="nx">msg</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Received: Nothing&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>运行 Demo 见：https://codepen.io/itibbers/pen/yLBJddd</p>]]></content:encoded>
    </item>
    <item>
      <title>vue-programmatic-navigation-issue</title>
      <link>https://itibbers.com/posts/vue-programmatic-navigation-issue/</link>
      <pubDate>Tue, 02 Apr 2019 12:15:02 +0000</pubDate>
      <guid>https://itibbers.com/posts/vue-programmatic-navigation-issue/</guid>
      <description>&lt;p&gt;Question: $router.push({query})/replace not updating the URL.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Question: $router.push({query})/replace not updating the URL.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">handleSort</span><span class="p">({</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nx">order</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">query</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">query</span><span class="p">[</span><span class="s1">&#39;_order_by&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">prop</span>
</span></span><span class="line"><span class="cl">    <span class="nx">query</span><span class="p">[</span><span class="s1">&#39;_order_desc&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">order</span> <span class="o">===</span> <span class="s1">&#39;descending&#39;</span> <span class="o">?</span> <span class="s1">&#39;asc&#39;</span> <span class="o">:</span> <span class="s1">&#39;desc&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$router</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">query</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Perhaps you are reusing the reference to the same array in multiple route objects. Object.assign doesn&rsquo;t do a deep copy. Mutating an array doesn&rsquo;t trigger a route transition and in the subsequent route navigation triggered by <code>router.push</code> / <code>router.replace</code> the check in transitionTo recognizes no change since it compares the array to itself.</p>
<p>The solution is to work with an array like described here: <a href="https://vincent.billey.me/pure-javascript-immutable-array/">Pure javascript immutable array</a></p>
<p>But doing a deep copy is a very weird but also reliable way to not have to write your code overly complicated:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">))</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>
