<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>itibbers</title>
    <link>https://itibbers.com/</link>
    <description>Recent content on itibbers</description>
    <image>
      <title>itibbers</title>
      <url>https://itibbers.com/og-image.png</url>
      <link>https://itibbers.com/og-image.png</link>
    </image>
    <generator>Hugo -- 0.147.9</generator>
    <language>en</language>
    <lastBuildDate>Sat, 30 May 2020 15:36:38 +0000</lastBuildDate>
    <atom:link href="https://itibbers.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二叉树锯齿形层次遍历</title>
      <link>https://itibbers.com/posts/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 30 May 2020 15:36:38 +0000</pubDate>
      <guid>https://itibbers.com/posts/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</guid>
      <description>&lt;p&gt;BFS 增加 order。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>BFS 增加 order。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Definition for a binary tree node.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * function TreeNode(val) {
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     this.val = val;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     this.left = this.right = null;
</span></span></span><span class="line"><span class="cl"><span class="cm"> * }
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @param {TreeNode} root
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @return {number[][]}
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">zigzagLevelOrder</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">queue</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">order</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">length</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">order</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="p">(</span><span class="nx">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">left</span><span class="p">)</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">left</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">right</span><span class="p">)</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="p">(</span><span class="nx">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">right</span><span class="p">)</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">left</span><span class="p">)</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">left</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">order</span> <span class="o">=</span> <span class="o">!</span><span class="nx">order</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">res</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>11个class选择器可以干掉1个id选择器吗</title>
      <link>https://itibbers.com/posts/11%E4%B8%AAclass%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%B9%B2%E6%8E%891%E4%B8%AAid%E9%80%89%E6%8B%A9%E5%99%A8%E5%90%97/</link>
      <pubDate>Wed, 27 May 2020 16:29:48 +0000</pubDate>
      <guid>https://itibbers.com/posts/11%E4%B8%AAclass%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%AF%E4%BB%A5%E5%B9%B2%E6%8E%891%E4%B8%AAid%E9%80%89%E6%8B%A9%E5%99%A8%E5%90%97/</guid>
      <description>&lt;p&gt;今天遇到一个有趣的问题，class 选择器权重是 10，id 选择器权重是 100，那么 11 个 class 选择器可以干掉 1 个 id 选择器吗？😂&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>今天遇到一个有趣的问题，class 选择器权重是 10，id 选择器权重是 100，那么 11 个 class 选择器可以干掉 1 个 id 选择器吗？😂</p>
<p>先来一段简单的 html 测试下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;k&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;a b c d e f g h i j k&#34;</span><span class="p">&gt;</span>xxxxx<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;a&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;b&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;c&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;d&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;e&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;f&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;g&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;h&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;i&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;j&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;k&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;m&#34;</span><span class="p">&gt;</span>xxxx<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nc">a</span><span class="p">.</span><span class="nc">b</span><span class="p">.</span><span class="nc">c</span><span class="p">.</span><span class="nc">d</span><span class="p">.</span><span class="nc">e</span><span class="p">.</span><span class="nc">f</span><span class="p">.</span><span class="nc">g</span><span class="p">.</span><span class="nc">h</span><span class="p">.</span><span class="nc">i</span><span class="p">.</span><span class="nc">j</span><span class="p">.</span><span class="nc">k</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">background</span><span class="p">:</span> <span class="kc">black</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nc">a</span> <span class="p">.</span><span class="nc">b</span> <span class="p">.</span><span class="nc">c</span> <span class="p">.</span><span class="nc">d</span> <span class="p">.</span><span class="nc">e</span> <span class="p">.</span><span class="nc">f</span> <span class="p">.</span><span class="nc">g</span> <span class="p">.</span><span class="nc">h</span> <span class="p">.</span><span class="nc">i</span> <span class="p">.</span><span class="nc">j</span> <span class="p">.</span><span class="nc">k</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">background</span><span class="p">:</span> <span class="kc">red</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">#</span><span class="nn">k</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">background</span><span class="p">:</span> <span class="kc">green</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">#</span><span class="nn">m</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">background</span><span class="p">:</span> <span class="kc">yellow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>发现并不能，难道选择器的权重不是 10 和 100？</p>
<p>查了 MDN，同时通过 Google 搜索发现，张鑫旭大佬以前写过的一篇文章，总结如下：
以前浏览器通过 8 位字节存储选择器，于是同时出现 256 个选择器溢出到了 id 区域，但是现在这个问题早被 Chrome 修复了。
其它浏览器未验证，当然这只是一种有趣的极端情况，平常开发中应该不会遇到。</p>
<blockquote>
<p><a href="https://www.zhangxinxu.com/wordpress/2012/08/256-class-selector-beat-id-selector/">有趣：256 个 class 选择器可以干掉 1 个 id 选择器</a></p></blockquote>]]></content:encoded>
    </item>
    <item>
      <title>js链式调用和流程控制</title>
      <link>https://itibbers.com/posts/js%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 11 May 2020 21:51:02 +0000</pubDate>
      <guid>https://itibbers.com/posts/js%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>&lt;p&gt;实现&lt;code&gt;new Person(&#39;xiaoming&#39;).say(&#39;hello&#39;).sleep(2).play(&#39;js&#39;).sleep(1).say(&#39;hhh&#39;)&lt;/code&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>实现<code>new Person('xiaoming').say('hello').sleep(2).play('js').sleep(1).say('hhh')</code></p>
<p>链式调用没什么可说的 return this 就好了，此处的 sleep 乍一看确实会引发一些思考，关键是异步之后 this 在哪里，那这个时候可以创建一个异步队列。(js event loop)
整个实现可以分为三个核心部分：</p>
<ol>
<li>串接所有 this （通过 return this 的方式）</li>
<li>把所有任务放到任务队列里面</li>
<li>通过一个 next 方法有序执行队列里面的任务</li>
</ol>
<p>具体实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fn</span> <span class="o">&amp;&amp;</span> <span class="nx">fn</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">play</span><span class="p">(</span><span class="nx">thing</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Playing </span><span class="si">${</span><span class="nx">thing</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">say</span><span class="p">(</span><span class="nx">thing</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Saying </span><span class="si">${</span><span class="nx">thing</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">sleep</span><span class="p">(</span><span class="nx">seconds</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// console.log(`Sleeping`)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span> <span class="nx">seconds</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;xiaoming&#39;</span><span class="p">).</span><span class="nx">say</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">).</span><span class="nx">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">play</span><span class="p">(</span><span class="s1">&#39;js&#39;</span><span class="p">).</span><span class="nx">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">say</span><span class="p">(</span><span class="s1">&#39;hhh&#39;</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>实现中文排序、数字英文混合排序</title>
      <link>https://itibbers.com/posts/%E5%AE%9E%E7%8E%B0%E4%B8%AD%E6%96%87%E6%8E%92%E5%BA%8F%E6%95%B0%E5%AD%97%E8%8B%B1%E6%96%87%E6%B7%B7%E5%90%88%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 09 Mar 2020 11:25:52 +0000</pubDate>
      <guid>https://itibbers.com/posts/%E5%AE%9E%E7%8E%B0%E4%B8%AD%E6%96%87%E6%8E%92%E5%BA%8F%E6%95%B0%E5%AD%97%E8%8B%B1%E6%96%87%E6%B7%B7%E5%90%88%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;JS 排序：localeCompare() 方法实现中文排序、sort 方法实现数字英文混合排序&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>JS 排序：localeCompare() 方法实现中文排序、sort 方法实现数字英文混合排序</p>
<p>定义：用本地特定的顺序来比较两个字符串。</p>
<p>语法：stringObject.localeCompare(target)</p>
<p>参数：target——要以本地特定的顺序与 stringObject 进行比较的字符串。</p>
<p>返回值：说明比较结果的数字。</p>
<p>（1）如果 stringObject 小于 target，则 localeCompare() 返回小于 0 的数。</p>
<p>（2）如果 stringObject 大于 target，则该方法返回大于 0 的数。</p>
<p>（3）如果两个字符串相等，或根据本地排序规则没有区别，该方法返回 0。</p>
<p>说明：把 &lt; 和 &gt; 运算符应用到字符串时，它们只用字符的 Unicode 编码比较字符串，而不考虑当地的排序规则。以这种方法生成的顺序不一定是正确的。localeCompare() 方法提供的比较字符串的方法，考虑了默认的本地排序规则。ECMAscript 标准并没有规定如何进行本地特定的比较操作，它只规定该函数采用底层操作系统提供的排序规则。</p>
<p>实例：</p>
<h2 id="1可以使用-localecompare-方法来实现中文按照拼音排序方法相当简单">1、可以使用 localeCompare() 方法来实现中文按照拼音排序，方法相当简单</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;白鸽&#39;</span><span class="p">,</span> <span class="s1">&#39;麻雀&#39;</span><span class="p">,</span> <span class="s1">&#39;大象&#39;</span><span class="p">,</span> <span class="s1">&#39;狗&#39;</span><span class="p">,</span> <span class="s1">&#39;猫&#39;</span><span class="p">,</span> <span class="s1">&#39;鸡&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="nx">compareFunction</span><span class="p">(</span><span class="nx">item1</span><span class="p">,</span> <span class="nx">item2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">item1</span><span class="p">.</span><span class="nx">localeCompare</span><span class="p">(</span><span class="nx">item2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="c1">//[&#34;白鸽&#34;, &#34;大象&#34;, &#34;狗&#34;, &#34;鸡&#34;, &#34;麻雀&#34;, &#34;猫&#34;]
</span></span></span></code></pre></div><p>而且可以通过如下代码实现中文按照拼音排序，并且可以将中文按照 a,b,c,d……进行区分。代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">pySegSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">empty</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">localeCompare</span><span class="p">)</span> <span class="k">return</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">letters</span> <span class="o">=</span> <span class="s1">&#39;*abcdefghjklmnopqrstwxyz&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">zh</span> <span class="o">=</span> <span class="s1">&#39;阿八嚓哒妸发旮哈讥咔垃痳拏噢妑七呥扨它穵夕丫帀&#39;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">segs</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">curr</span>
</span></span><span class="line"><span class="cl">  <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">letters</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">curr</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">letter</span><span class="o">:</span> <span class="k">this</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">((</span><span class="o">!</span><span class="nx">zh</span><span class="p">[</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="nx">zh</span><span class="p">[</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="nx">localeCompare</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">localeCompare</span><span class="p">(</span><span class="nx">zh</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">curr</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">empty</span> <span class="o">||</span> <span class="nx">curr</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">segs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">curr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">curr</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">localeCompare</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">segs</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pySegSort</span><span class="p">([</span><span class="s1">&#39;白鸽&#39;</span><span class="p">,</span> <span class="s1">&#39;麻雀&#39;</span><span class="p">,</span> <span class="s1">&#39;黑&#39;</span><span class="p">,</span> <span class="s1">&#39;大象&#39;</span><span class="p">,</span> <span class="s1">&#39;狗&#39;</span><span class="p">,</span> <span class="s1">&#39;猫&#39;</span><span class="p">,</span> <span class="s1">&#39;妈妈&#39;</span><span class="p">,</span> <span class="s1">&#39;马&#39;</span><span class="p">,</span> <span class="s1">&#39;鸡&#39;</span><span class="p">,</span> <span class="s1">&#39;瘦&#39;</span><span class="p">,</span> <span class="s1">&#39;胖&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>结果显示为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">;[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">letter</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;白鸽&#39;</span><span class="p">]</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">letter</span><span class="o">:</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;大象&#39;</span><span class="p">]</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">letter</span><span class="o">:</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;狗&#39;</span><span class="p">]</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">letter</span><span class="o">:</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;黑&#39;</span><span class="p">]</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">letter</span><span class="o">:</span> <span class="s1">&#39;j&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;鸡&#39;</span><span class="p">]</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">letter</span><span class="o">:</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;妈妈&#39;</span><span class="p">,</span> <span class="s1">&#39;麻雀&#39;</span><span class="p">,</span> <span class="s1">&#39;马&#39;</span><span class="p">,</span> <span class="s1">&#39;猫&#39;</span><span class="p">]</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">letter</span><span class="o">:</span> <span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;胖&#39;</span><span class="p">]</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">letter</span><span class="o">:</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;瘦&#39;</span><span class="p">]</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>通过这个就可以写一个电话薄，像现在手机上面的，通过人名来进行分组、排序，之后再通过循环和布局就可以实现电话薄的功能。</p>
<h2 id="2实现字母数字的混合排序">2、实现字母、数字的混合排序：</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">d</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span> <span class="c1">// 如果 number 是有限数字（或可转换为有限数字），那么返回 true。否则，如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">d</span> <span class="o">=</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">(</span><span class="nx">c</span> <span class="o">!=</span> <span class="nx">d</span> <span class="o">&amp;&amp;</span> <span class="nx">d</span> <span class="o">-</span> <span class="nx">c</span><span class="p">)</span> <span class="o">||</span> <span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">//[1, 2, 3, 10, 20, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;k&#34;]
</span></span></span></code></pre></div><p>isFinite() 判断 a、b 是否是数字。</p>
<p>return 后面的语句：</p>
<p>c != d &amp;&amp; c - d 如果 c 和 d 不相等 ，也就是说比较的值不是同一类型。那就比较 c-d 的值是 1 还是-1（中间进行了隐式类型转换）</p>
<p>如果 c == d 也就是说 c、d 是同一类型的值，c、d 可能都是字母，也可能都是数字。这里就可以直接比较大小了（都是字母的话不能直接做减法）。
isFinite() 函数用于检查其参数是否是无穷大。如果 number 是有限数字（或可转换为有限数字），那么返回 true。否则，如果 number 是 NaN（非数字），或者是正、负无穷大的数，则返回 false。</p>]]></content:encoded>
    </item>
    <item>
      <title>动态规划模板</title>
      <link>https://itibbers.com/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 02 Mar 2020 16:43:33 +0000</pubDate>
      <guid>https://itibbers.com/posts/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E6%9D%BF/</guid>
      <description>&lt;p&gt;Before starting the topic let me introduce myself. I am a Mobile Developer currently working in Warsaw and spending my free time for interview preparations. I started to prepare for interviews two years ago. At that time I should say I could not solve the two sum problem. Easy problems seemed to me like hard ones so most of the time I had to look at editorials and discuss section. Currently, I have solved ~800 problems and time to time participate in contests. I usually solve 3 problems in a contest and sometimes 4 problems. Ok, lets come back to the topic.&lt;/p&gt;
&lt;p&gt;Recently I have concentrated my attention on Dynamic Programming cause its one of the hardest topics in an interview prep. After solving ~140 problems in DP I have noticed that there are few patterns that can be found in different problems. So I did a research on that and find the following topics. I will not give complete ways how to solve problems but these patterns may be helpful in solving DP.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Before starting the topic let me introduce myself. I am a Mobile Developer currently working in Warsaw and spending my free time for interview preparations. I started to prepare for interviews two years ago. At that time I should say I could not solve the two sum problem. Easy problems seemed to me like hard ones so most of the time I had to look at editorials and discuss section. Currently, I have solved ~800 problems and time to time participate in contests. I usually solve 3 problems in a contest and sometimes 4 problems. Ok, lets come back to the topic.</p>
<p>Recently I have concentrated my attention on Dynamic Programming cause its one of the hardest topics in an interview prep. After solving ~140 problems in DP I have noticed that there are few patterns that can be found in different problems. So I did a research on that and find the following topics. I will not give complete ways how to solve problems but these patterns may be helpful in solving DP.</p>
<h1 id="patterns">Patterns</h1>
<hr>
<p><a href="https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns#Minimum-%28Maximum%29-Path-to-Reach-a-Target">Minimum (Maximum) Path to Reach a Target</a>
<a href="https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns#distinct-ways">Distinct Ways</a>
<a href="https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns#Merging-Intervals">Merging Intervals</a>
<a href="https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns#DP-on-Strings">DP on Strings</a>
<a href="https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns#Decision-Making">Decision Making</a></p>
<h1 id="minimum-maximum-path-to-reach-a-target">Minimum (Maximum) Path to Reach a Target</h1>
<hr>
<p>Generate problem statement for this pattern</p>
<h3 id="statement">Statement</h3>
<blockquote>
<p>Given a target find minimum (maximum) cost / path / sum to reach the target.</p></blockquote>
<h3 id="approach">Approach</h3>
<blockquote>
<p>Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.</p></blockquote>
<pre tabindex="0"><code>routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) + cost[i]
</code></pre><p>Generate optimal solutions for all values in the target and return the value for the target.</p>
<pre tabindex="0"><code>for (int i = 1; i &lt;= target; ++i) {
   for (int j = 0; j &lt; ways.size(); ++j) {
       if (ways[j] &lt;= i) {
           dp[i] = min(dp[i], dp[i - ways[j]]) + cost / path / sum;
       }
   }
}

return dp[target]
</code></pre><h3 id="similar-problems">Similar Problems</h3>
<p><a href="https://leetcode.com/problems/min-cost-climbing-stairs/">746. Min Cost Climbing Stairs</a> <code>Easy</code></p>
<pre tabindex="0"><code>for (int i = 2; i &lt;= n; ++i) {
   dp[i] = min(dp[i-1], dp[i-2]) + (i == n ? 0 : cost[i]);
}

return dp[n]
</code></pre><p><a href="https://leetcode.com/problems/minimum-path-sum/">64. Minimum Path Sum</a> <code>Medium</code></p>
<pre tabindex="0"><code>for (int i = 1; i &lt; n; ++i) {
   for (int j = 1; j &lt; m; ++j) {
       grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j];
   }
}

return grid[n-1][m-1]
</code></pre><p><a href="https://leetcode.com/problems/coin-change/">322. Coin Change</a> <code>Medium</code></p>
<pre tabindex="0"><code>for (int j = 1; j &lt;= amount; ++j) {
   for (int i = 0; i &lt; coins.size(); ++i) {
       if (coins[i] &lt;= j) {
           dp[j] = min(dp[j], dp[j - coins[i]] + 1);
       }
   }
}
</code></pre><p><a href="https://leetcode.com/problems/minimum-falling-path-sum/">931. Minimum Falling Path Sum</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/minimum-cost-for-tickets/">983. Minimum Cost For Tickets</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/2-keys-keyboard/">650. 2 Keys Keyboard</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/perfect-squares/">279. Perfect Squares</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/last-stone-weight-ii/">1049. Last Stone Weight II</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/triangle/">120. Triangle</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/ones-and-zeroes/">474. Ones and Zeroes</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/maximal-square/">221. Maximal Square</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/coin-change/">322. Coin Change</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/">1240. Tiling a Rectangle with the Fewest Squares</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/dungeon-game/">174. Dungeon Game</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/minimum-number-of-refueling-stops/">871. Minimum Number of Refueling Stops</a> <code>Hard</code></p>
<h1 id="distinct-ways">Distinct Ways</h1>
<hr>
<p>Generate problem statement for this pattern</p>
<h3 id="statement-1">Statement</h3>
<blockquote>
<p>Given a target find a number of distinct ways to reach the target.</p></blockquote>
<h3 id="approach-1">Approach</h3>
<blockquote>
<p>Sum all possible ways to reach the current state.</p></blockquote>
<pre tabindex="0"><code>routes[i] = routes[i-1] + routes[i-2], ... , + routes[i-k]
</code></pre><p>Generate sum for all values in the target and return the value for the target.</p>
<pre tabindex="0"><code>for (int i = 1; i &lt;= target; ++i) {
   for (int j = 0; j &lt; ways.size(); ++j) {
       if (ways[j] &lt;= i) {
           dp[i] += dp[i - ways[j]];
       }
   }
}

return dp[target]
</code></pre><h3 id="similar-problems-1">Similar Problems</h3>
<p><a href="https://leetcode.com/problems/climbing-stairs/">70. Climbing Stairs</a> <code>easy</code></p>
<pre tabindex="0"><code>for (int stair = 2; stair &lt;= n; ++stair) {
   for (int step = 1; step &lt;= 2; ++step) {
       dp[stair] += dp[stair-step];
   }
}
</code></pre><p><a href="https://leetcode.com/problems/unique-paths/">62. Unique Paths</a> <code>Medium</code></p>
<pre tabindex="0"><code>for (int i = 1; i &lt; m; ++i) {
   for (int j = 1; j &lt; n; ++j) {
       dp[i][j] = dp[i][j-1] + dp[i-1][j];
   }
}
</code></pre><p><a href="https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/">1155. Number of Dice Rolls With Target Sum</a> <code>Medium</code></p>
<pre tabindex="0"><code>for (int rep = 1; rep &lt;= d; ++rep) {
   vector&lt;int&gt; new_ways(target+1);
   for (int already = 0; already &lt;= target; ++already) {
       for (int pipe = 1; pipe &lt;= f; ++pipe) {
           if (already - pipe &gt;= 0) {
               new_ways[already] += ways[already - pipe];
               new_ways[already] %= mod;
           }
       }
   }
   ways = new_ways;
}
</code></pre><p><strong>Note</strong></p>
<p>Some questions point out the number of repetitions, in that case, add one more loop to simulate every repetition.</p>
<p><a href="https://leetcode.com/problems/knight-probability-in-chessboard/">688. Knight Probability in Chessboard</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/target-sum/">494. Target Sum</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/combination-sum-iv/">377. Combination Sum IV</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/knight-dialer/">935. Knight Dialer</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/dice-roll-simulation/">1223. Dice Roll Simulation</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/partition-equal-subset-sum/">416. Partition Equal Subset Sum</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/soup-servings/">808. Soup Servings</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/domino-and-tromino-tiling/">790. Domino and Tromino Tiling</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/">801. Minimum Swaps To Make Sequences Increasing</a></p>
<p><a href="https://leetcode.com/problems/number-of-longest-increasing-subsequence/">673. Number of Longest Increasing Subsequence</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/unique-paths-ii/">63. Unique Paths II</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/out-of-boundary-paths/">576. Out of Boundary Paths</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/">1269. Number of Ways to Stay in the Same Place After Some Steps</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/count-vowels-permutation/">1220. Count Vowels Permutation</a> <code>Hard</code></p>
<h1 id="merging-intervals">Merging Intervals</h1>
<hr>
<p>Generate problem statement for this pattern</p>
<h3 id="statement-2">Statement</h3>
<blockquote>
<p>Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.</p></blockquote>
<h3 id="approach-2">Approach</h3>
<blockquote>
<p>Find all optimal solutions for every interval and return the best possible answer.</p></blockquote>
<pre tabindex="0"><code>// from i to j
dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]
</code></pre><p>Get the best from the left and right sides and add a solution for the current position.</p>
<pre tabindex="0"><code>for(int l = 1; l&lt;n; l++) {
   for(int i = 0; i&lt;n-l; i++) {
       int j = i+l;
       for(int k = i; k&lt;j; k++) {
           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
       }
   }
}

return dp[0][n-1]
</code></pre><h3 id="similar-problems-2">Similar Problems</h3>
<p><a href="https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/">1130. Minimum Cost Tree From Leaf Values</a> <code>Medium</code></p>
<pre tabindex="0"><code>for (int l = 1; l &lt; n; ++l) {
   for (int i = 0; i &lt; n - l; ++i) {
       int j = i + l;
       dp[i][j] = INT_MAX;
       for (int k = i; k &lt; j; ++k) {
           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j]);
       }
   }
}
</code></pre><p><a href="https://leetcode.com/problems/unique-binary-search-trees/">96. Unique Binary Search Trees</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/minimum-score-triangulation-of-polygon/">1039. Minimum Score Triangulation of Polygon</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/remove-boxes/">546. Remove Boxes</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/minimum-cost-to-merge-stones/">1000. Minimum Cost to Merge Stones</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/burst-balloons/">312. Burst Balloons</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/guess-number-higher-or-lower-ii/">375. Guess Number Higher or Lower II</a> <code>Medium</code></p>
<h1 id="dp-on-strings">DP on Strings</h1>
<hr>
<p>General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big</p>
<h3 id="statement-3">Statement</h3>
<blockquote>
<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>some result</code>.</p></blockquote>
<h3 id="approach-3">Approach</h3>
<blockquote>
<p>Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.</p></blockquote>
<pre tabindex="0"><code>// i - indexing string s1
// j - indexing string s2
for (int i = 1; i &lt;= n; ++i) {
   for (int j = 1; j &lt;= m; ++j) {
       if (s1[i-1] == s2[j-1]) {
           dp[i][j] = /*code*/;
       } else {
           dp[i][j] = /*code*/;
       }
   }
}
</code></pre><blockquote>
<p>If you are given one string <code>s</code> the approach may little vary</p></blockquote>
<pre tabindex="0"><code>for (int l = 1; l &lt; n; ++l) {
   for (int i = 0; i &lt; n-l; ++i) {
       int j = i + l;
       if (s[i] == s[j]) {
           dp[i][j] = /*code*/;
       } else {
           dp[i][j] = /*code*/;
       }
   }
}
</code></pre><p><a href="https://leetcode.com/problems/longest-common-subsequence/">1143. Longest Common Subsequence</a> <code>Medium</code></p>
<pre tabindex="0"><code>for (int i = 1; i &lt;= n; ++i) {
   for (int j = 1; j &lt;= m; ++j) {
       if (text1[i-1] == text2[j-1]) {
           dp[i][j] = dp[i-1][j-1] + 1;
       } else {
           dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
       }
   }
}
</code></pre><p><a href="https://leetcode.com/problems/palindromic-substrings/">647. Palindromic Substrings</a> <code>Medium</code></p>
<pre tabindex="0"><code>for (int l = 1; l &lt; n; ++l) {
   for (int i = 0; i &lt; n-l; ++i) {
       int j = i + l;
       if (s[i] == s[j] &amp;&amp; dp[i+1][j-1] == j-i-1) {
           dp[i][j] = dp[i+1][j-1] + 2;
       } else {
           dp[i][j] = 0;
       }
   }
}
</code></pre><p><a href="https://leetcode.com/problems/longest-palindromic-subsequence/">516. Longest Palindromic Subsequence</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/shortest-common-supersequence/">1092. Shortest Common Supersequence</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/edit-distance/">72. Edit Distance</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/distinct-subsequences/">115. Distinct Subsequences</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">712. Minimum ASCII Delete Sum for Two Strings</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/longest-palindromic-substring/">5. Longest Palindromic Substring</a> <code>Medium</code></p>
<h1 id="decision-making">Decision Making</h1>
<hr>
<p>The general problem statement for this pattern is forgiven situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.</p>
<h3 id="statement-4">Statement</h3>
<blockquote>
<p>Given a set of values find an answer with an option to choose or ignore the current value.</p></blockquote>
<h3 id="approach-4">Approach</h3>
<blockquote>
<p>If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.</p></blockquote>
<pre tabindex="0"><code>// i - indexing a set of values
// j - options to ignore j values
for (int i = 1; i &lt; n; ++i) {
   for (int j = 1; j &lt;= k; ++j) {
       dp[i][j] = max({dp[i][j], dp[i-1][j] + arr[i], dp[i-1][j-1]});
       dp[i][j-1] = max({dp[i][j-1], dp[i-1][j-1] + arr[i], arr[i]});
   }
}
</code></pre><p><a href="https://leetcode.com/problems/house-robber/">198. House Robber</a> <code>Easy</code></p>
<pre tabindex="0"><code>for (int i = 1; i &lt; n; ++i) {
   dp[i][1] = max(dp[i-1][0] + nums[i], dp[i-1][1]);
   dp[i][0] = dp[i-1][1];
}
</code></pre><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/">121. Best Time to Buy and Sell Stock</a> <code>Easy</code></p>
<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714. Best Time to Buy and Sell Stock with Transaction Fee</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309. Best Time to Buy and Sell Stock with Cooldown</a> <code>Medium</code></p>
<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">123. Best Time to Buy and Sell Stock III</a> <code>Hard</code></p>
<p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">188. Best Time to Buy and Sell Stock IV</a> <code>Hard</code></p>
<p>I hope these tips will be helpful 😊</p>
<blockquote>
<p><a href="https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns">https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns</a></p></blockquote>]]></content:encoded>
    </item>
    <item>
      <title>链表问题集锦</title>
      <link>https://itibbers.com/posts/%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</link>
      <pubDate>Mon, 02 Sep 2019 01:05:56 +0000</pubDate>
      <guid>https://itibbers.com/posts/%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</guid>
      <description>&lt;p&gt;链表问题在面试过程中也是很重要也很基础的一部分，链表本身很灵活，很考查编程功底，所以是很值得考的地方。我将复习过程中觉得比较好的链表问题整理了下。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>链表问题在面试过程中也是很重要也很基础的一部分，链表本身很灵活，很考查编程功底，所以是很值得考的地方。我将复习过程中觉得比较好的链表问题整理了下。</p>
<p>下面是本文所要用到链表节点的定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Node</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">*</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h2 id="1-在-o1时间删除链表节点">1. 在 O(1)时间删除链表节点</h2>
<p>题目描述：给定链表的头指针和一个节点指针，在 O(1)时间删除该节点。[Google 面试题]</p>
<p>分析：本题与《编程之美》上的「从无头单链表中删除节点」类似。主要思想都是「狸猫换太子」，即用下一个节点数据覆盖要删除的节点，然后删除下一个节点。但是如果节点是尾节点时，该方法就行不通了。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//O(1)时间删除链表节点，从无头单链表中删除节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">deleteRandomNode</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">cur</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">cur</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>    <span class="c1">//不能是尾节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Node</span><span class="o">*</span> <span class="n">pNext</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cur</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">pNext</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">pNext</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="n">pNext</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="2-单链表的转置">2. 单链表的转置</h2>
<p>题目描述：输入一个单向链表，输出逆序反转后的链表</p>
<p>分析：链表的转置是一个很常见、很基础的数据结构题了，非递归的算法很简单，用三个临时指针 pre、head、next 在链表上循环一遍即可。递归算法也是比较简单的，但是如果思路不清晰估计一时半会儿也写不出来吧。</p>
<p>下面是循环版本和递归版本的链表转置代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//单链表的转置,循环方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">reverseByLoop</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">pre</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">head</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">pre</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">pre</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">head</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pre</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//单链表的转置,递归方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">reverseByRecursion</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//第一个条件是判断异常，第二个条件是结束判断
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">newHead</span> <span class="o">=</span> <span class="n">reverseByRecursion</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">newHead</span><span class="p">;</span>    <span class="c1">//返回新链表的头指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h2 id="3-求链表倒数第-k-个节点">3. 求链表倒数第 k 个节点</h2>
<p>题目描述：输入一个单向链表，输出该链表中倒数第 k 个节点，链表的倒数第 0 个节点为链表的尾指针。</p>
<p>分析：设置两个指针 p1、p2，首先 p1 和 p2 都指向 head，然后 p2 向前走 k 步，这样 p1 和 p2 之间就间隔 k 个节点，最后 p1 和 p2 同时向前移动，直至 p2 走到链表末尾。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//倒数第k个节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">theKthNode</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span><span class="kt">int</span> <span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>    <span class="c1">//异常判断
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">slow</span><span class="p">,</span><span class="o">*</span><span class="n">fast</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">slow</span> <span class="o">=</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(;</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">fast</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>    <span class="c1">//考虑k大于链表长度的case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">slow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="4-求链表的中间节点">4. 求链表的中间节点</h2>
<p>题目描述：求链表的中间节点，如果链表的长度为偶数，返回中间两个节点的任意一个，若为奇数，则返回中间节点。</p>
<p>分析：此题的解决思路和第 3 题「求链表的倒数第 k 个节点」很相似。可以先求链表的长度，然后计算出中间节点所在链表顺序的位置。但是如果要求只能扫描一遍链表，如何解决呢？最高效的解法和第 3 题一样，通过两个指针来完成。用两个指针从链表头节点开始，一个指针每次向后移动两步，一个每次移动一步，直到快指针移到到尾节点，那么慢指针即是所求。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//求链表的中间节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">theMiddleNode</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">slow</span><span class="p">,</span><span class="o">*</span><span class="n">fast</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">slow</span> <span class="o">=</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//如果要求在链表长度为偶数的情况下，返回中间两个节点的第一个，可以用下面的循环条件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//while(fast &amp;&amp; fast-&gt;next != NULL &amp;&amp; fast-&gt;next-&gt;next != NULL)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">slow</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="5-判断单链表是否存在环">5. 判断单链表是否存在环</h2>
<p>题目描述：输入一个单向链表，判断链表是否有环？</p>
<p>分析：通过两个指针，分别从链表的头节点出发，一个每次向后移动一步，另一个移动两步，两个指针移动速度不一样，如果存在环，那么两个指针一定会在环里相遇。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//判断单链表是否存在环,参数circleNode是环内节点，后面的题目会用到
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">bool</span> <span class="nf">hasCircle</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span><span class="n">Node</span> <span class="o">*&amp;</span><span class="n">circleNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">slow</span><span class="p">,</span><span class="o">*</span><span class="n">fast</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">slow</span> <span class="o">=</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">fast</span> <span class="o">==</span> <span class="n">slow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">circleNode</span> <span class="o">=</span> <span class="n">fast</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="6-找到环的入口点">6. 找到环的入口点</h2>
<p>题目描述：输入一个单向链表，判断链表是否有环。如果链表存在环，如何找到环的入口点？</p>
<p>解题思路： 由上题可知，按照 p2 每次两步，p1 每次一步的方式走，发现 p2 和 p1 重合，确定了单向链表有环路了。接下来，让 p2 回到链表的头部，重新走，每次步长不是走 2 了，而是走 1，那么当 p1 和 p2 再次相遇的时候，就是环路的入口了。</p>
<p>为什么？：假定起点到环入口点的距离为 a，p1 和 p2 的相交点 M 与环入口点的距离为 b，环路的周长为 L，当 p1 和 p2 第一次相遇的时候，假定 p1 走了 n 步。那么有：</p>
<p>p1 走的路径： a+b ＝ n；
p2 走的路径： a+b+k<em>L = 2</em>n； p2 比 p1 多走了 k 圈环路，总路程是 p1 的 2 倍</p>
<p>根据上述公式可以得到 k*L=a+b=n 显然，如果从相遇点 M 开始，p1 再走 n 步的话，还可以再回到相遇点，同时 p2 从头开始走的话，经过 n 步，也会达到相遇点 M。</p>
<p>显然在这个步骤当中 p1 和 p2 只有前 a 步走的路径不同，所以当 p1 和 p2 再次重合的时候，必然是在链表的环路入口点上。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//找到环的入口点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">findLoopPort</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//如果head为空，或者为单结点，则不存在环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">slow</span><span class="p">,</span><span class="o">*</span><span class="n">fast</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">slow</span> <span class="o">=</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//先判断是否存在环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">fast</span> <span class="o">==</span> <span class="n">slow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="n">slow</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>    <span class="c1">//不存在环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>                <span class="c1">//快指针从头开始走，步长变为1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="n">slow</span><span class="p">)</span>            <span class="c1">//两者相遇即为入口点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fast</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="7-编程判断两个链表是否相交">7. 编程判断两个链表是否相交</h2>
<p>题目描述：给出两个单向链表的头指针（如下图所示），</p>
<p>比如 h1、h2，判断这两个链表是否相交。这里为了简化问题，我们假设两个链表均不带环。</p>
<p>解题思路：</p>
<p>直接循环判断第一个链表的每个节点是否在第二个链表中。但，这种方法的时间复杂度为 O(Length(h1) * Length(h2))。显然，我们得找到一种更为有效的方法，至少不能是 O（N^2）的复杂度。</p>
<p>针对第一个链表直接构造 hash 表，然后查询 hash 表，判断第二个链表的每个节点是否在 hash 表出现，如果所有的第二个链表的节点都能在 hash 表中找到，即说明第二个链表与第一个链表有相同的节点。时间复杂度为为线性：O(Length(h1) + Length(h2))，同时为了存储第一个链表的所有节点，空间复杂度为 O(Length(h1))。是否还有更好的方法呢，既能够以线性时间复杂度解决问题，又能减少存储空间？</p>
<p>转换为环的问题。把第二个链表接在第一个链表后面，如果得到的链表有环，则说明两个链表相交。如何判断有环的问题上面已经讨论过了，但这里有更简单的方法。因为如果有环，则第二个链表的表头一定也在环上，即第二个链表会构成一个循环链表，我们只需要遍历第二个链表，看是否会回到起始点就可以判断出来。这个方法的时间复杂度是线性的，空间是常熟。</p>
<p>进一步考虑“如果两个没有环的链表相交于某一节点，那么在这个节点之后的所有节点都是两个链表共有的”这个特点，我们可以知道，如果它们相交，则最后一个节点一定是共有的。而我们很容易能得到链表的最后一个节点，所以这成了我们简化解法的一个主要突破口。那么，我们只要判断两个链表的尾指针是否相等。相等，则链表相交；否则，链表不相交。
所以，先遍历第一个链表，记住最后一个节点。然后遍历第二个链表，到最后一个节点时和第一个链表的最后一个节点做比较，如果相同，则相交，否则，不相交。这样我们就得到了一个时间复杂度，它为 O((Length(h1) + Length(h2))，而且只用了一个额外的指针来存储最后一个节点。这个方法时间复杂度为线性 O(N)，空间复杂度为 O(1)，显然比解法三更胜一筹。</p>
<p>解法四的代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//判断两个链表是否相交
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">bool</span> <span class="nf">isIntersect</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">h1</span><span class="p">,</span><span class="n">Node</span> <span class="o">*</span><span class="n">h2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">h1</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">h2</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>    <span class="c1">//异常判断
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="n">h1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">h1</span> <span class="o">=</span> <span class="n">h1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">h2</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">h2</span> <span class="o">=</span> <span class="n">h2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">h1</span> <span class="o">==</span> <span class="n">h2</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>        <span class="c1">//尾节点是否相同
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">else</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="8-扩展链表有环如何判断相交">8. 扩展：链表有环，如何判断相交</h2>
<p>题目描述：上面的问题都是针对链表无环的，那么如果现在，链表是有环的呢?上面的方法还同样有效么?</p>
<p>分析：如果有环且两个链表相交，则两个链表都有共同一个环，即环上的任意一个节点都存在于两个链表上。因此，就可以判断一链表上俩指针相遇的那个节点，在不在另一条链表上。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//判断两个带环链表是否相交
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">bool</span> <span class="nf">isIntersectWithLoop</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">h1</span><span class="p">,</span><span class="n">Node</span> <span class="o">*</span><span class="n">h2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">circleNode1</span><span class="p">,</span><span class="o">*</span><span class="n">circleNode2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">hasCircle</span><span class="p">(</span><span class="n">h1</span><span class="p">,</span><span class="n">circleNode1</span><span class="p">))</span>    <span class="c1">//判断链表带不带环，并保存环内节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>                <span class="c1">//不带环，异常退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">hasCircle</span><span class="p">(</span><span class="n">h2</span><span class="p">,</span><span class="n">circleNode2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">circleNode2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">temp</span> <span class="o">!=</span> <span class="n">circleNode2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">temp</span> <span class="o">==</span> <span class="n">circleNode1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="9-扩展两链表相交的第一个公共节点">9. 扩展：两链表相交的第一个公共节点</h2>
<p>题目描述：如果两个无环单链表相交，怎么求出他们相交的第一个节点呢？</p>
<p>分析：采用对齐的思想。计算两个链表的长度 L1 , L2，分别用两个指针 p1 , p2 指向两个链表的头，然后将较长链表的 p1（假设为 p1）向后移动 L2 - L1 个节点，然后再同时向后移动 p1 , p2，直到 p1 = p2。相遇的点就是相交的第一个节点。</p>
<p>代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">//求两链表相交的第一个公共节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Node</span><span class="o">*</span> <span class="nf">findIntersectNode</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">h1</span><span class="p">,</span><span class="n">Node</span> <span class="o">*</span><span class="n">h2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len1</span> <span class="o">=</span> <span class="n">listLength</span><span class="p">(</span><span class="n">h1</span><span class="p">);</span>          <span class="c1">//求链表长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">listLength</span><span class="p">(</span><span class="n">h2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//对齐两个链表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">len1</span> <span class="o">&gt;</span> <span class="n">len2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len1</span><span class="o">-</span><span class="n">len2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">h1</span><span class="o">=</span><span class="n">h1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len2</span><span class="o">-</span><span class="n">len1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">h2</span><span class="o">=</span><span class="n">h2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">h1</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">h1</span> <span class="o">==</span> <span class="n">h2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">h1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">h1</span> <span class="o">=</span> <span class="n">h1</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">h2</span> <span class="o">=</span> <span class="n">h2</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="10-总结">10. 总结</h2>
<p>可以发现，在链表的问题中，通过两个的指针来提高效率是很值得考虑的一个解决方案，所以一定要记住这种解题思路。记住几种典型的链表问题解决方案，很多类似的题目都可以转换到熟悉的问题再解决。</p>
<p>参考文献</p>
<blockquote>
<p><a href="http://blog.csdn.net/v_JULY_v/article/details/6447013">程序员编程艺术：第九章、闲话链表追赶问题</a> &gt; <a href="http://www.cppblog.com/humanchao/archive/2008/04/17/47357.html">判断单链表是否存在环，判断两个链表是否相交问题详解</a> &gt; <a href="http://blog.csdn.net/anonymalias/article/details/11020477">面试算法之链表操作集锦</a></p></blockquote>
<p>转载自：http://wuchong.me/blog/2014/03/25/interview-link-questions/</p>]]></content:encoded>
    </item>
    <item>
      <title>Vue methods vs watchers vs computed properties</title>
      <link>https://itibbers.com/posts/vue-watch-computed-method/</link>
      <pubDate>Thu, 22 Aug 2019 11:09:26 +0000</pubDate>
      <guid>https://itibbers.com/posts/vue-watch-computed-method/</guid>
      <description>&lt;p&gt;Vue.js provides us &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt; and &lt;code&gt;methods&lt;/code&gt; properties. When to use one vs the other?&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Vue.js provides us <code>watch</code>, <code>computed</code> and <code>methods</code> properties. When to use one vs the other?</p>
<blockquote>
<p>When to use methods</p></blockquote>
<ol>
<li>To react on some event happening in the DOM</li>
<li>To call a function when something happens in your component. You can call a methods from computed properties or watchers.</li>
</ol>
<blockquote>
<p>When to use computed properties</p></blockquote>
<ol>
<li>You need to compose new data from existing data sources</li>
<li>You have a variable you use in your template that’s built from one or more data properties</li>
<li>You want to reduce a complicated, nested property name to a more readable and easy to use one, yet update it when the original property changes</li>
<li>You need to reference a value from the template. In this case, creating a computed property is the best thing because it’s cached.</li>
<li>You need to listen to changes of more than one data property</li>
</ol>
<blockquote>
<p>When to use watchers</p></blockquote>
<ol>
<li>You want to listen when a data property changes, and perform some action</li>
<li>You want to listen to a prop value change</li>
<li>You only need to listen to one specific property (you can’t watch multiple properties at the same time)</li>
<li>You want to watch a data property until it reaches some specific value and then do something</li>
</ol>]]></content:encoded>
    </item>
    <item>
      <title>Vue组件通信与数据传递</title>
      <link>https://itibbers.com/posts/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</link>
      <pubDate>Mon, 19 Aug 2019 15:01:54 +0000</pubDate>
      <guid>https://itibbers.com/posts/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</guid>
      <description>&lt;p&gt;Vue 组件通信整理：&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Vue 组件通信整理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span># parent <span class="err">&amp;</span> child<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>props[$attrs <span class="err">&amp;</span> $listeners] $emit[.sync]<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>$parent $children/ref<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>eventBus<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>Vuex $root<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>slot<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>provide inject<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">parent-child</span> <span class="na">:name</span><span class="err">.</span><span class="na">sync</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="na">ref</span><span class="o">=</span><span class="s">&#34;parentChild&#34;</span> <span class="err">@</span><span class="na">say</span><span class="o">=</span><span class="s">&#34;receive&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">parent-child</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;childFn&#34;</span><span class="p">&gt;</span>What&#39;s your name, parent-child?<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  Change Name: <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">v-model</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">hr</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span># child <span class="err">&amp;</span> child<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>子-&gt;父-&gt;子<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>eventBus<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>Vuex $root<span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">ol</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">child-brother</span><span class="p">&gt;&lt;/</span><span class="nt">child-brother</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">child-sister</span><span class="p">&gt;&lt;/</span><span class="nt">child-sister</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;parent-child&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 数据：父-&gt;子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">props</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">alertName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;I am &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">say</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;say&#39;</span><span class="p">,</span> <span class="s1">&#39;I am fine&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">parentFn</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">$parent</span><span class="p">.</span><span class="nx">receive</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;p&gt;Name: {{name}}&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;button @click=&#34;say&#34;&gt;Say something&lt;/button&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;button @click=&#34;parentFn&#34;&gt;Hello Parent?&lt;/button&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;button @click=&#34;$emit(&#39;update:name&#39;, &#39;Awesome Jack&#39;)&#34;&gt;Change name self&lt;/button&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;child-brother&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">eventBus</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;talking&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;p&gt;brother&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;button @click=&#34;sayHello&#34;&gt;hello my sister&lt;/button&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span><span class="p">(</span><span class="s1">&#39;child-sister&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">eventBus</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;talking&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">words</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Received from brother: &#39;</span> <span class="o">+</span> <span class="nx">words</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">template</span><span class="o">:</span> <span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">      &lt;p&gt;sister waiting brother takling...&lt;/p&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">    &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="sb">  `</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">eventBus</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Jack&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 事件：父-&gt;子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">childFn</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// $refs or $children
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">parentChild</span><span class="p">.</span><span class="nx">alertName</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">receive</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alert</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> said: </span><span class="si">${</span><span class="nx">msg</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Received: Nothing&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>运行 Demo 见：https://codepen.io/itibbers/pen/yLBJddd</p>]]></content:encoded>
    </item>
    <item>
      <title>vue-programmatic-navigation-issue</title>
      <link>https://itibbers.com/posts/vue-programmatic-navigation-issue/</link>
      <pubDate>Tue, 02 Apr 2019 12:15:02 +0000</pubDate>
      <guid>https://itibbers.com/posts/vue-programmatic-navigation-issue/</guid>
      <description>&lt;p&gt;Question: $router.push({query})/replace not updating the URL.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Question: $router.push({query})/replace not updating the URL.</p>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">handleSort</span><span class="p">({</span> <span class="nx">column</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nx">order</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">query</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">query</span><span class="p">[</span><span class="s1">&#39;_order_by&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">prop</span>
</span></span><span class="line"><span class="cl">    <span class="nx">query</span><span class="p">[</span><span class="s1">&#39;_order_desc&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">order</span> <span class="o">===</span> <span class="s1">&#39;descending&#39;</span> <span class="o">?</span> <span class="s1">&#39;asc&#39;</span> <span class="o">:</span> <span class="s1">&#39;desc&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">$router</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">query</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Perhaps you are reusing the reference to the same array in multiple route objects. Object.assign doesn&rsquo;t do a deep copy. Mutating an array doesn&rsquo;t trigger a route transition and in the subsequent route navigation triggered by <code>router.push</code> / <code>router.replace</code> the check in transitionTo recognizes no change since it compares the array to itself.</p>
<p>The solution is to work with an array like described here: <a href="https://vincent.billey.me/pure-javascript-immutable-array/">Pure javascript immutable array</a></p>
<p>But doing a deep copy is a very weird but also reliable way to not have to write your code overly complicated:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">))</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>爬楼梯问题</title>
      <link>https://itibbers.com/posts/%E7%88%AC%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 19 Feb 2019 18:50:19 +0000</pubDate>
      <guid>https://itibbers.com/posts/%E7%88%AC%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;今天在脉脉上看到有个段子手 HR 说：
今天沟通了一位候选人，他给我出了个题，说答对了就把简历给我[笑哭][笑哭]各位大佬帮帮忙[抱拳][抱拳]
一个人爬楼梯，每次只能爬 1 个或 2 个台阶，假设有 10 个台阶，那么这个人有多少种不同的爬楼梯方法？
我只想在楼梯顶端等你，不想知道是怎么爬的[流泪][流泪]&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>今天在脉脉上看到有个段子手 HR 说：
今天沟通了一位候选人，他给我出了个题，说答对了就把简历给我[笑哭][笑哭]各位大佬帮帮忙[抱拳][抱拳]
一个人爬楼梯，每次只能爬 1 个或 2 个台阶，假设有 10 个台阶，那么这个人有多少种不同的爬楼梯方法？
我只想在楼梯顶端等你，不想知道是怎么爬的[流泪][流泪]</p>
<p>一个有趣的问题，试着解一下。
因为最后只有迈一步或两步，所以 n 阶台阶，最后解为 f(n) = f(n - 1) + f(n - 2)
原来是斐波那契数列，用递归解一下所有可能的爬楼方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">ret</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">backtrack</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">str</span> <span class="o">+=</span> <span class="s1">&#39;1&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">backtrack</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">backtrack</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">backtrack</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ret</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>浏览器及HTTP缓存机制</title>
      <link>https://itibbers.com/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%8Ahttp%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 26 Jul 2018 15:02:32 +0000</pubDate>
      <guid>https://itibbers.com/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%8Ahttp%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;Web 缓存是一种保存 Web 资源副本并在下次请求时直接使用该副本的技术。缓存=请求资源的副本&lt;/p&gt;
&lt;p&gt;Web 缓存可以分为这几种：浏览器缓存、CDN 缓存、服务器缓存、数据库数据缓存 。因为可能会直接使用副本免于重新发送请求或者仅仅确认资源没变无需重新传输资源实体，Web 缓存具有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以减少延迟加快网页打开速度&lt;/li&gt;
&lt;li&gt;重复利用资源减少网络带宽消耗&lt;/li&gt;
&lt;li&gt;降低请求次数或者减少传输内容从而减轻服务器压力。&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded><![CDATA[<p>Web 缓存是一种保存 Web 资源副本并在下次请求时直接使用该副本的技术。缓存=请求资源的副本</p>
<p>Web 缓存可以分为这几种：浏览器缓存、CDN 缓存、服务器缓存、数据库数据缓存 。因为可能会直接使用副本免于重新发送请求或者仅仅确认资源没变无需重新传输资源实体，Web 缓存具有以下优点：</p>
<ul>
<li>可以减少延迟加快网页打开速度</li>
<li>重复利用资源减少网络带宽消耗</li>
<li>降低请求次数或者减少传输内容从而减轻服务器压力。</li>
</ul>
<p>[TOC]</p>
<p>这篇文章主要讨论和前端密切相关的浏览器 HTTP 缓存机制。浏览器 HTTP 缓存可以分为强缓存和协商缓存。强缓存和协商缓存最大也是最根本的区别是：强缓存命中的话不会发请求到服务器（比如 chrome 中的 200 from memory cache），协商缓存一定会发请求到服务器，通过资源的请求首部字段验证资源是否命中协商缓存，如果协商缓存命中，服务器会将这个请求返回，但是不会返回这个资源的实体，而是通知客户端可以从缓存中加载这个资源（304 not modified）。简略流程图如下：</p>
<p><img loading="lazy" src="https://ws1.sinaimg.cn/large/006tKfTcly1ftnafr9qk3j30tq0f5400.jpg"></p>
<h2 id="1-浏览器-http-缓存由-http-报文的首部字段决定">1 浏览器 HTTP 缓存由 HTTP 报文的首部字段决定</h2>
<p><img loading="lazy" src="https://ws3.sinaimg.cn/large/006tKfTcly1ftnagybj4hj30ea08twem.jpg"></p>
<ol>
<li>
<p>http header 中与缓存有关的 key
<img loading="lazy" src="https://ws4.sinaimg.cn/large/006tKfTcly1ftnahvfa0kj31420fi77l.jpg"></p>
</li>
<li>
<p>缓存协商策略用于重新验证缓存资源是否有效，有关的 key
<img loading="lazy" src="https://ws1.sinaimg.cn/large/006tKfTcly1ftnais0iauj314c0fqtbt.jpg"></p>
</li>
</ol>
<h3 id="11-控制强缓存的字段按优先级介绍">1.1 控制强缓存的字段按优先级介绍</h3>
<ol>
<li>
<p>Pragma
Pragma 是 HTTP/1.1 之前版本遗留的通用首部字段，仅作为于 HTTP/1.0 的向后兼容而使用。虽然它是一个通用首部，但是它在响应报文中时的行为没有规范，依赖于浏览器的实现。RFC 中该字段只有 no-cache 一个可选值，会通知浏览器不直接使用缓存，要求向服务器发请求校验新鲜度。因为它优先级最高，当存在时一定不会命中强缓存。目前基本不使用。</p>
</li>
<li>
<p>Cache-Control
Cache-Control 是一个通用首部字段，也是 HTTP/1.1 控制浏览器缓存的主流字段。
浏览器缓存里, Cache-Control 是金字塔顶尖的规则, 它藐视一切其他设置, 只要其他设置与其抵触, 一律覆盖之.</p>
</li>
</ol>
<p>不仅如此, 它还是一个复合规则, 包含多种值, 横跨 存储策略, 过期策略 两种, 同时在请求头和响应头都可设置.</p>
<p>语法为: “Cache-Control : cache-directive”.</p>
<p>Cache-directive 共有如下 12 种(其中请求中指令 7 种, 响应中指令 9 种):</p>
<p><img loading="lazy" src="https://ws3.sinaimg.cn/large/006tKfTcly1ftnal0pg00j31630elwjq.jpg"></p>
<ul>
<li>
<p>max-age（单位为 s）设置缓存的存在时间，相对于发送请求的时间。只有响应报文首部设置 Cache-Control 为非 0 的 max-age 才有可能命中强缓存。当满足这个条件，同时响应报文首部中 Cache-Control 不存在 no-cache、no-store 且请求报文首部不存在 Pragma 字段，才会真正命中强缓存。</p>
</li>
<li>
<p>no-cache 表示请求必须先与服务器确认缓存的有效性，如果有效才能使用缓存（协商缓存），无论是响应报文首部还是请求报文首部出现这个字段均一定不会命中强缓存。Chrome 硬性重新加载（Command+shift+R）会在请求的首部加上 Pragma：no-cache 和 Cache-Control：no-cache。</p>
</li>
<li>
<p>no-store 表示禁止浏览器以及所有中间缓存存储任何版本的返回响应，一定不会出现强缓存和协商缓存，适合个人隐私数据或者经济类数据。</p>
</li>
<li>
<p>public 表明响应可以被浏览器、CDN 等等缓存。</p>
</li>
<li>
<p>private 响应只作为私有的缓存，不能被 CDN 等缓存。如果要求 HTTP 认证，响应会自动设置为 private。</p>
</li>
</ul>
<p><img loading="lazy" src="https://ws1.sinaimg.cn/large/006tKfTcly1ftnamm7mgfj30gj0got8q.jpg">
图：Cache-Control 策略优先级</p>
<p>Cache-Control 允许自由组合可选值，例如：</p>
<pre tabindex="0"><code>Cache-Control: max-age=3600, must-revalidate
</code></pre><p>它意味着该资源是从原服务器上取得的，且其缓存（新鲜度）的有效时间为一小时，在后续一小时内，用户重新访问该资源则无须发送请求。 当然这种组合的方式也会有些限制，比如 no-cache 就不能和 max-age、min-fresh、max-stale 一起搭配使用。</p>
<p>3.Expires 是 HTTP/1.1 之前版本遗留的通用首部字段，仅作为于 HTTP/1.0 的向后兼容而使用。</p>
<p>即到期时间, 以服务器时间为参考系, 其优先级比 Cache-Control:max-age 低, 两者同时出现在响应头时, Expires 将被后者覆盖. 如果 Expires, Cache-Control: max-age, 或 Cache-Control:s-maxage 都没有在响应头中出现, 并且也没有其它缓存的设置, 那么浏览器默认会采用一个启发式的算法, 通常会取响应头的 Date_value - Last-Modified_value 值的 10%作为缓存时间.</p>
<p>如下资源便采取了启发式缓存算法.
<img loading="lazy" src="https://ws2.sinaimg.cn/large/006tKfTcly1ftnanz8dl3j30m3028wem.jpg"></p>
<p>其缓存时间为 (Date_value - Last-Modified_value) * 10%, 计算如下:</p>
<pre tabindex="0"><code>const Date_value = new Date(&#39;Thu, 06 Apr 2017 01:30:56 GMT&#39;).getTime();
const LastModified_value = new Date(&#39;Thu, 01 Dec 2016 06:23:23 GMT&#39;).getTime();
const cacheTime = (Date_value - LastModified_value) / 10;
const Expires_timestamp = Date_value + cacheTime;
const Expires_value = new Date(Expires_timestamp);
console.log(&#39;Expires:&#39;, Expires_value); // Expires: Tue Apr 18 2017 23:25:41 GMT+0800 (CST)
</code></pre><p>可见该资源将于 2017 年 4 月 18 日 23 点 25 分 41 秒过期, 尝试以下两步进行验证:</p>
<ol>
<li>
<p>试着把本地时间修改为 2017 年 4 月 18 日 23 点 25 分 40 秒, 迅速刷新页面, 发现强缓存依然有效(依旧是 200 OK (from disk cache)).</p>
</li>
<li>
<p>然后又修改本地时间为 2017 年 4 月 18 日 23 点 26 分 40 秒(即往后拨 1 分钟), 刷新页面, 发现缓存已过期, 此时浏览器重新向服务器发起了验证, 且命中了 304 协商缓存, 如下所示.</p>
</li>
</ol>
<p><img loading="lazy" src="https://ws1.sinaimg.cn/large/006tKfTcly1ftnaon5w6vj30lm059js8.jpg"></p>
<ol start="3">
<li>将本地时间恢复正常(即 2017-04-06 09:54:19). 刷新页面, 发现 Date 依然是 4 月 18 日, 如下所示.</li>
</ol>
<p><img loading="lazy" src="https://ws1.sinaimg.cn/large/006tKfTcly1ftnap0d3a4j30nb093tai.jpg"></p>
<p>从 ⚠️ Provisional headers are shown 和 Date 字段可以看出来, 浏览器并未发出请求, 缓存依然有效, 只不过此时 Status Code 显示为 200 OK. (甚至我还专门打开了 charles, 也没有发现该资源的任何请求, 可见这个 200 OK 多少有些误导人的意味)</p>
<p>可见, 启发式缓存算法采用的缓存时间可长可短, 因此对于常规资源, 建议明确设置缓存时间(如指定 max-age 或 expires).</p>
<h3 id="12-控制协商缓存的字段">1.2 控制协商缓存的字段</h3>
<p>上述的首部字段均能让客户端决定是否向服务器发送请求，比如设置的缓存时间未过期，那么自然直接从本地缓存取数据即可（在 chrome 下表现为 200 from cache），若缓存时间过期了或资源不该直接走缓存，则会发请求到服务器去。
我们现在要说的问题是，<strong>如果客户端向服务器发了请求，那么是否意味着一定要读取回该资源的整个实体内容呢？</strong>
我们试着这么想——客户端上某个资源保存的缓存时间过期了，但这时候其实服务器并没有更新过这个资源，如果这个资源数据量很大，客户端要求服务器再把这个东西重新发一遍过来，是否非常浪费带宽和时间呢？
答案是肯定的，那么是否有办法让服务器知道客户端现在存有的缓存文件，其实跟自己所有的文件是一致的，然后直接告诉客户端说“这东西你直接用缓存里的就可以了，我这边没更新过呢，就不再传一次过去了”。
举例来说：</p>
<pre tabindex="0"><code>C：小服，你几岁了？
S：小客，我18岁了。
=================================
C：小服 ，你几岁了？我猜你18岁了。
S：靠，你知道还问我？（304）
=================================
C：小服 ，你几岁了？我猜你18岁了。
S：小客 ，我19岁了。（200）
</code></pre><p>为了让客户端与服务器之间能实现缓存文件是否更新的验证、提升缓存的复用率，Http1.1 新增了几个首部字段来做这件事情。</p>
<p><img loading="lazy" src="https://ws2.sinaimg.cn/large/006tKfTcly1ftnaq12rn7j30dz04imx2.jpg"></p>
<ol>
<li>
<p>Last-Modified/If-Modified-Since
If-Modified-Since 是一个请求首部字段，并且只能用在 GET 或者 HEAD 请求中。
Last-Modified 是一个响应首部字段，包含服务器认定的资源作出修改的日期及时间。
当带着 If-Modified-Since 头访问服务器请求资源时，服务器会检查 Last-Modified，如果 Last-Modified 的时间早于或等于 If-Modified-Since 则会返回一个不带主体的 304 响应，否则将重新返回资源。
If-Modified-Since: , :: GMT Last-Modified: , :: GMT</p>
</li>
<li>
<p>ETag/If-None-Match</p>
</li>
</ol>
<p>ETag 是一个响应首部字段，它是根据实体内容生成的一段 hash 字符串，标识资源的状态，由服务端产生。</p>
<p>If-None-Match 是一个条件式的请求首部。如果请求资源时在请求首部加上这个字段，值为之前服务器端返回的资源上的 ETag，则当且仅当服务器上没有任何资源的 ETag 属性值与这个首部中列出的时候，服务器才会返回带有所请求资源实体的 200 响应，否则服务器会返回不带实体的 304 响应。ETag 优先级比 Last-Modified 高，同时存在时会以 ETag 为准。</p>
<p>If-None-Match: &lt;etag_value&gt; If-None-Match: &lt;etag_value&gt;, &lt;etag_value&gt;, … If-None-Match: *</p>
<p>ETag 属性之间的比较采用的是弱比较算法，即两个文件除了每个比特都相同外，内容一致也可以认为是相同的。例如，如果两个页面仅仅在页脚的生成时间有所不同，就可以认为二者是相同的。</p>
<p>因为 ETag 的特性，所以相较于 Last-Modified 有一些优势：</p>
<ol>
<li>某些情况下服务器无法获取资源的最后修改时间</li>
<li>资源的最后修改时间变了但是内容没变，使用 ETag 可以正确缓存</li>
<li>如果资源修改非常频繁，在秒以下的时间进行修改，Last-Modified 只能精确到秒</li>
</ol>
<h2 id="2-http-其他字段">2 http 其他字段</h2>
<h3 id="21-age">2.1 Age</h3>
<p>出现此字段, 表示命中代理服务器的缓存. 它指的是代理服务器对于请求资源的已缓存时间, 单位为秒. 如下:</p>
<pre tabindex="0"><code>Age:2383321
Date:Wed, 08 Mar 2017 16:12:42 GMT
</code></pre><p>以上指的是, 代理服务器在 2017 年 3 月 8 日 16:12:42 时向源服务器发起了对该资源的请求, 目前已缓存了该资源 2383321 秒.</p>
<h3 id="22-date">2.2 Date</h3>
<p>指的是响应生成的时间. 请求经过代理服务器时, 返回的 Date 未必是最新的, 通常这个时候, 代理服务器将增加一个 Age 字段告知该资源已缓存了多久.</p>
<h3 id="23-vary">2.3 Vary</h3>
<p>对于服务器而言, 资源文件可能不止一个版本, 比如说压缩和未压缩, 针对不同的客户端, 通常需要返回不同的资源版本. 比如说老式的浏览器可能不支持解压缩, 这个时候, 就需要返回一个未压缩的版本; 对于新的浏览器, 支持压缩, 返回一个压缩的版本, 有利于节省带宽, 提升体验. 那么怎么区分这个版本呢, 这个时候就需要 Vary 了.
服务器通过指定 Vary: Accept-Encoding, 告知代理服务器, 对于这个资源, 需要缓存两个版本: 压缩和未压缩. 这样老式浏览器和新的浏览器, 通过代理, 就分别拿到了未压缩和压缩版本的资源, 避免了都拿同一个资源的尴尬.</p>
<pre tabindex="0"><code>Vary:Accept-Encoding,User-Agent
</code></pre><p>如上设置, 代理服务器将针对是否压缩和浏览器类型两个维度去缓存资源. 如此一来, 同一个 url, 就能针对 PC 和 Mobile 返回不同的缓存内容.</p>
<h2 id="3-缓存头部对比">3 缓存头部对比</h2>
<p><img loading="lazy" src="https://ws4.sinaimg.cn/large/006tKfTcly1ftnasbu6u5j31dy0xeds0.jpg"></p>
<h2 id="4-用户刷新访问行为">4 用户刷新/访问行为</h2>
<p><img loading="lazy" src="https://ws2.sinaimg.cn/large/006tKfTcly1ftnau6q6gcj30vy0dcabl.jpg"></p>
<h2 id="5-缓存实践">5 缓存实践</h2>
<p>综上对各种 HTTP 缓存控制头部的对比以及用户可能出现的浏览器刷新行为的讨论，当我们在一个项目上做 http 缓存的应用时，我们实际上还是会把上述提及的大多数首部字段均使用上。</p>
<h3 id="51-expires--cache-control">5.1 Expires / Cache-Control</h3>
<p>Expires 用时刻来标识失效时间，不免收到时间同步的影响，而 Cache-Control 使用时间间隔很好的解决了这个问题。 但是 Cache-Control 是 HTTP1.1 才有的，不适用于 HTTP1.0，而 Expires 既适用于 HTTP1.0，也适用于 HTTP1.1，所以说在大多数情况下同时发送这两个头会是一个更好的选择，当客户端两种头都能解析的时候，会优先使用 Cache-Control。</p>
<h3 id="52-last-modified--etag">5.2 Last-Modified / ETag</h3>
<p>二者都是通过某个标识值来请求资源， 如果服务器端的资源没有变化，则自动返回 HTTP 304 （Not Changed）状态码，内容为空，这样就节省了传输数据量。而当资源发生比那话后，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。
其中 Last-Modified 使用文件最后修改作为文件标识值，它无法处理文件一秒内多次修改的情况，而且只要文件修改了哪怕文件实质内容没有修改，也会重新返回资源内容；ETag 作为“被请求变量的实体值”，其完全可以解决 Last-Modified 头部的问题，但是其计算过程需要耗费服务器资源。</p>
<h3 id="53-from-cache--304">5.3 from-cache / 304</h3>
<p>Expires 和 Cache-Control 都有一个问题就是服务端作为的修改，如果还在缓存时效里，那么客户端是不会去请求服务端资源的（非刷新），这就存在一个资源版本不符的问题，而强制刷新一定会发起 HTTP 请求并返回资源内容，无论该内容在这段时间内是否修改过；而 Last-Modified 和 Etag 每次请求资源都会发起请求，哪怕是很久都不会有修改的资源，都至少有一次请求响应的消耗。
对于所有可缓存资源，指定一个 Expires 或 Cache-Control max-age 以及一个 Last-Modified 或 ETag 至关重要。同时使用前者和后者可以很好的相互适应。
前者不需要每次都发起一次请求来校验资源时效性，后者保证当资源未出现修改的时候不需要重新发送该资源。而在用户的不同刷新页面行为中，二者的结合也能很好的利用 HTTP 缓存控制特性，无论是在地址栏输入 URI 然后输入回车进行访问，还是点击刷新按钮，浏览器都能充分利用缓存内容，避免进行不必要的请求与数据传输。</p>
<h3 id="54-避免-304">5.4 避免 304</h3>
<p>同学们是否还记得我们在讨论用户刷新页面行为中体积的 index.css 文件，它实际上被命名为 index.03d344bd.css。而细心的同学也会发现它的 Expires 和 Cache-Control 时间出奇的长，这难道不会导致用户无法得到其最近的内容吗？</p>
<p>其做法实际上很简单，它把服务侧 ETag 的那一套理论搬到了前端来使用。 页面的静态资源以版本形式发布，常用的方法是在文件名或参数带上一串 md5 或时间标记符：</p>
<pre tabindex="0"><code>https://hm.baidu.com/hm.js?e23800c454aa573c0ccb16b52665ac26
http://tb1.bdstatic.com/tb/_/tbean_safe_ajax_94e7ca2.js
http://img1.gtimg.com/ninja/2/2016/04/ninja145972803357449.jpg
</code></pre><p>可以看到上面的例子中有不同的做法，有的在 URI 后面加上了 md5 参数，有的将 md5 值作为文件名的一部分，有的将资源放在特性版本的目录中。
那么在文件没有变动的时候，浏览器不用发起请求直接可以使用缓存文件；而在文件有变化的时候，由于文件版本号的变更，导致文件名变化，请求的 url 变了，自然文件就更新了。这样能确保客户端能及时从服务器收取到新修改的文件。通过这样的处理，增长了静态资源，特别是图片资源的缓存时间，避免该资源很快过期，客户端频繁向服务端发起资源请求，服务器再返回 304 响应的情况（有 Last-Modified/Etag）。</p>
<h3 id="55-tips">5.5 Tips</h3>
<ul>
<li>需要兼容 HTTP1.0 的时候需要使用 Expires，不然可以考虑直接使用 Cache-Control</li>
<li>需要处理一秒内多次修改的情况，或者其他 Last-Modified 处理不了的情况，才使用 ETag，否则使用 Last-Modified。</li>
<li>对于所有可缓存资源，需要指定一个 Expires 或 Cache-Control，同时指定 Last-Modified 或者 Etag。</li>
<li>可以通过标识文件版本名、加长缓存时间的方式来减少 304 响应。</li>
</ul>
<h2 id="6-问题及解决方案">6 问题及解决方案</h2>
<ol>
<li>
<p>什么时候该设置缓存？</p>
</li>
<li>
<p>前端如何有效设置缓存？</p>
</li>
<li>
<p>开发中如何避免缓存？</p>
</li>
<li>
<p>既生 Last-Modified，何生 E-tag？</p>
</li>
<li>
<p>假设所请求资源于 4 月 5 日缓存, 且在 4 月 12 日过期.
当 max-age 与 max-stale 和 min-fresh 同时使用时, 它们的设置相互之间独立生效, 最为保守的缓存策略总是有效. 这意味着, 如果 max-age=10 days, max-stale=2 days, min-fresh=3 days, 那么:
由于客户端总是采用最保守的缓存策略, 因此, 4 月 9 日后, 对于该资源的请求将重新向服务器发起验证.</p>
</li>
</ol>
<p>答案：</p>
<ol>
<li>
<p>根据缓存的作用及具体需求场景设置。</p>
</li>
<li>
<p><a href="http://wiki.xiaodutv.com/pages/viewpage.action?pageId=17173670#1.1%20%E6%8E%A7%E5%88%B6%E5%BC%BA%E7%BC%93%E5%AD%98%E7%9A%84%E5%AD%97%E6%AE%B5%E6%8C%89%E4%BC%98%E5%85%88%E7%BA%A7%E4%BB%8B%E7%BB%8D">1.1 控制强缓存的字段按优先级介绍</a></p>
</li>
<li>
<p><a href="http://wiki.xiaodutv.com/pages/viewpage.action?pageId=17173670#4%20%E7%94%A8%E6%88%B7%E5%88%B7%E6%96%B0/%E8%AE%BF%E9%97%AE%E8%A1%8C%E4%B8%BA">用户刷新/访问行为</a></p>
</li>
<li>
<p>既生 Last-Modified，何生 E-tag？</p>
</li>
</ol>
<p>你可能会觉得使用 Last-Modified 已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要 Etag（实体标识）呢？</p>
<p>HTTP1.1 中 Etag 的出现主要是为了解决几个 Last-Modified 比较难解决的问题：</p>
<p>a. Last-Modified 标注的最后修改只能精确到秒级，如果某些文件在 1 秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间</p>
<p>b. 如果某些文件会被定期生成，当有时内容并没有任何变化，但 Last-Modified 却改变了，导致文件没法使用缓存</p>
<p>c. 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</p>
<p>Etag 是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。Last-Modified 与 ETag 是可以一起使用的，服务器会优先验证 ETag，一致的情况下，才会继续比对 Last-Modified，最后才决定是否返回 304。</p>
<h2 id="7-参考">7 参考</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ">HTTP 缓存 - HTTP | MDN</a>
<a href="http://wiki.xiaodutv.com/pages/viewpage.action?pageId=9963820">浏览器缓存机制</a>
<a href="https://juejin.im/post/5a673af06fb9a01c927ed880">浏览器 HTTP 缓存机制</a>
<a href="http://louiszhai.github.io/2017/04/07/http-cache/">浏览器缓存机制剖析</a>
<a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653578381&amp;idx=1&amp;sn=3f676e2b2e08bcff831c69d31cf51c51">彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法</a>
<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">Header Field Definitions</a>
<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">超文本传输协议</a>
<a href="https://github.com/Pines-Cheng/blog/issues/5">前端必须知道的 http 缓存</a></p>
<hr>
<p><a href="">🔝 回到顶部</a></p>]]></content:encoded>
    </item>
    <item>
      <title>Node.js模拟请求发微博</title>
      <link>https://itibbers.com/posts/node-js%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E5%8F%91%E5%BE%AE%E5%8D%9A/</link>
      <pubDate>Fri, 16 Feb 2018 13:42:07 +0000</pubDate>
      <guid>https://itibbers.com/posts/node-js%E6%A8%A1%E6%8B%9F%E8%AF%B7%E6%B1%82%E5%8F%91%E5%BE%AE%E5%8D%9A/</guid>
      <description>&lt;p&gt;新浪微博 SDK 需要申请 App key，极其不方便，通过 Node.js 模拟请求发送微博。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>新浪微博 SDK 需要申请 App key，极其不方便，通过 Node.js 模拟请求发送微博。</p>
<h1 id="weibo-post"><a href="https://github.com/itibbers/weibo-post">weibo-post</a></h1>
<p>Post weibo text from https based on node.</p>
<h2 id="usage">Usage</h2>
<p>Using npm:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ npm i --save-dev weibo-post
</span></span></code></pre></div><p>In Node.js:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">weiboPost</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;weibo-post&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">weiboPost</span><span class="p">.</span><span class="nx">setCookie</span><span class="p">(</span><span class="s1">&#39;your weibo login cookie&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">weiboPost</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;your post content&#39;</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Android Broadcast/EventBus优缺点</title>
      <link>https://itibbers.com/posts/broadcast-eventbus%E4%BC%98%E7%BC%BA%E7%82%B9/</link>
      <pubDate>Wed, 24 Jan 2018 16:59:09 +0000</pubDate>
      <guid>https://itibbers.com/posts/broadcast-eventbus%E4%BC%98%E7%BC%BA%E7%82%B9/</guid>
      <description>&lt;p&gt;关于 Android 中本地广播和 EventBus 选择的问题：
本地广播是相对消耗时间、空间最多的一种方式，但是大家都知道，广播是四大组件之一，许多系统级的事件都是通过广播来通知的，比如说网络的变化、电量的变化，短信发送和接收的状态，所以，如果与 android 系统进行相关的通知，还是要选择本地广播；在 BroadcastReceiver 的 onReceive 方法中，可以获得 Context 、intent 参数，这两个参数可以调用许多的 sdk 中的方法，而 EventBus 获得这两个参数相对比较困难；&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>关于 Android 中本地广播和 EventBus 选择的问题：
本地广播是相对消耗时间、空间最多的一种方式，但是大家都知道，广播是四大组件之一，许多系统级的事件都是通过广播来通知的，比如说网络的变化、电量的变化，短信发送和接收的状态，所以，如果与 android 系统进行相关的通知，还是要选择本地广播；在 BroadcastReceiver 的 onReceive 方法中，可以获得 Context 、intent 参数，这两个参数可以调用许多的 sdk 中的方法，而 EventBus 获得这两个参数相对比较困难；</p>
<p>因此广播相对于其他的方式而言，广播是重量级的，消耗资源较多的方式。他的优势体现在与 sdk 连接紧密，如果需要同 android 交互的时候，广播的便捷性会抵消掉它过多的资源消耗，但是如果不同 android 交互，或者说，只做很少的交互，使用广播是一种浪费；</p>
<p>EventBus 作为 Android 开发中常用的框架，拥有着许多优点：</p>
<ol>
<li>调度灵活。不依赖于 Context，使用时无需像广播一样关注 Context 的注入与传递。父类对于通知的监听和处理可以继承给子类，这对于简化代码至关重要；通知的优先级，能够保证 Subscriber 关注最重要的通知；粘滞事件（sticky events）能够保证通知不会因 Subscriber 的不在场而忽略。可继承、优先级、粘滞，是 EventBus 比之于广播、观察者等方式最大的优点，它们使得创建结构良好组织紧密的通知系统成为可能。</li>
<li>使用简单。EventBus 的 Subscriber 注册非常简单，调用 eventBus 对象的 register 方法即可，如果不想创建 eventBus 还可以直接调用静态方法 EventBus.getDefault() 获取默认实例，Subscriber 接收到通知之后的操作放在 onEvent 方法里就行了。成为 Publisher 的过程就更简单了，只需要调用合适的 eventBus（自己创建的或是默认的）的 post 方法即可。</li>
<li>快速且轻量。作为 github 的明星项目之一， EventBus 的源代码中许多技巧来改善性能，EventBus 的缺点是他的代码逻辑不是很清楚，在 Subscriber 注册的时候，Subscriber 中的方法会被遍历查找以 onEvent 开头的 public 方法。这将带来一些问题，一旦对代码进行混淆，就无法查找到了。好消息是 EventBus 已经打算使用注解来实现，这应该能够解决代码混淆的问题。</li>
</ol>
<p>但有一个缺点是观察者独有的，那就是观察者可能会造成接口的膨胀。特别是当程序要求大量形式各异的通知，而程序员有没有做出良好的抽象时，代码中会包含大量的接口，接口数量的增长又会带来命名、注释等等一大堆问题。本质上说观察者要求程序员从零开始实现事件的产生、分发与处理过程，这就要求参与者必须对整个通知过程有着良好的理解。当程序代码适量时，这是一个合理的要求，然而当程序太大时，这将成为一种负担。</p>]]></content:encoded>
    </item>
    <item>
      <title>An invalid form control with name=&#39;xxx&#39; is not focusable.</title>
      <link>https://itibbers.com/posts/an-invalid-form-control-with-name-xxx-is-not-focusable/</link>
      <pubDate>Tue, 22 Nov 2016 13:43:18 +0000</pubDate>
      <guid>https://itibbers.com/posts/an-invalid-form-control-with-name-xxx-is-not-focusable/</guid>
      <description>&lt;p&gt;在表单提交时，如果某个控件被设置为 &lt;code&gt;display: none&lt;/code&gt; 且该字段可以为空，则必须移除 &lt;code&gt;required&lt;/code&gt; 属性，否则在 Chrome 浏览器中会出现错误。&lt;/p&gt;
&lt;p&gt;Chrome 浏览器要求必填字段不能为空，因此会弹出&amp;quot;请在此输入&amp;quot;的提示消息。但是，如果该控件被隐藏，Chrome 浏览器在表单提交时无法聚焦到该控件，因为它是不可见的，从而导致表单提交失败。&lt;/p&gt;
&lt;p&gt;要解决这个问题，当通过 JavaScript 隐藏控件时，我们也必须同时移除该控件的 &lt;code&gt;required&lt;/code&gt; 属性。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>在表单提交时，如果某个控件被设置为 <code>display: none</code> 且该字段可以为空，则必须移除 <code>required</code> 属性，否则在 Chrome 浏览器中会出现错误。</p>
<p>Chrome 浏览器要求必填字段不能为空，因此会弹出&quot;请在此输入&quot;的提示消息。但是，如果该控件被隐藏，Chrome 浏览器在表单提交时无法聚焦到该控件，因为它是不可见的，从而导致表单提交失败。</p>
<p>要解决这个问题，当通过 JavaScript 隐藏控件时，我们也必须同时移除该控件的 <code>required</code> 属性。</p>
]]></content:encoded>
    </item>
    <item>
      <title>set autocommit=0与start transaction区别</title>
      <link>https://itibbers.com/posts/set-autocommit-0%E4%B8%8Estart-transaction%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 17 Nov 2016 14:32:49 +0000</pubDate>
      <guid>https://itibbers.com/posts/set-autocommit-0%E4%B8%8Estart-transaction%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;p&gt;set autocommit=0,
当前 session 禁用自动提交事物，自此句执行以后，每个 SQL 语句或者语句块所在的事务都需要显示&amp;quot;commit&amp;quot;才能提交事务。&lt;/p&gt;
&lt;p&gt;start transaction&lt;/p&gt;
&lt;p&gt;指的是启动一个新事务。&lt;/p&gt;
&lt;p&gt;在默认的情况下，MySQL 从自动提交（autocommit）模式运行，这种模式会在每条语句执行完毕后把它作出的修改立刻提交给数据库并使之永久化。事实上，这相当于把每一条语句都隐含地当做一个事务来执行。如果你想明确地执行事务，需要禁用自动提交模式并告诉 MySQL 你想让它在何时提交或回滚有关的修改。
执行事务的常用办法是发出一条 START TRANSACTION（或 BEGIN）语句挂起自动提交模式，然后执行构成本次事务的各条语句，最后用一条 COMMIT 语句结束事务并把它们作出的修改永久性地记入数据库。万一在事务过程中发生错误，用一条 ROLLBACK 语句撤销事务并把数据库恢复到事务开 始之前的状态。&lt;/p&gt;
&lt;p&gt;START TRANSACTION 语句&amp;quot;挂起&amp;quot;自动提交模式的含义是：在事务被提交或回滚之后，该模式将恢复到开始本次事务的 START TRANSACTION 语句被执行之前的状态。（如果自动提交模式原来是激活的，结束事务将让你回到自动提交模式；如果它原来是禁用的，结束 当前事务将开始下一个事务。）&lt;/p&gt;
&lt;p&gt;如果是 autocommit 模式 ，autocommit 的值应该为 1 ，不 autocommit 的值是 0 ；请在试验前 确定 autocommit 的模式是否开启&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>set autocommit=0,
当前 session 禁用自动提交事物，自此句执行以后，每个 SQL 语句或者语句块所在的事务都需要显示&quot;commit&quot;才能提交事务。</p>
<p>start transaction</p>
<p>指的是启动一个新事务。</p>
<p>在默认的情况下，MySQL 从自动提交（autocommit）模式运行，这种模式会在每条语句执行完毕后把它作出的修改立刻提交给数据库并使之永久化。事实上，这相当于把每一条语句都隐含地当做一个事务来执行。如果你想明确地执行事务，需要禁用自动提交模式并告诉 MySQL 你想让它在何时提交或回滚有关的修改。
执行事务的常用办法是发出一条 START TRANSACTION（或 BEGIN）语句挂起自动提交模式，然后执行构成本次事务的各条语句，最后用一条 COMMIT 语句结束事务并把它们作出的修改永久性地记入数据库。万一在事务过程中发生错误，用一条 ROLLBACK 语句撤销事务并把数据库恢复到事务开 始之前的状态。</p>
<p>START TRANSACTION 语句&quot;挂起&quot;自动提交模式的含义是：在事务被提交或回滚之后，该模式将恢复到开始本次事务的 START TRANSACTION 语句被执行之前的状态。（如果自动提交模式原来是激活的，结束事务将让你回到自动提交模式；如果它原来是禁用的，结束 当前事务将开始下一个事务。）</p>
<p>如果是 autocommit 模式 ，autocommit 的值应该为 1 ，不 autocommit 的值是 0 ；请在试验前 确定 autocommit 的模式是否开启</p>
]]></content:encoded>
    </item>
    <item>
      <title>快速幂 快速幂取模</title>
      <link>https://itibbers.com/posts/%E5%BF%AB%E9%80%9F%E5%B9%82-%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1/</link>
      <pubDate>Wed, 22 Jun 2016 09:24:34 +0000</pubDate>
      <guid>https://itibbers.com/posts/%E5%BF%AB%E9%80%9F%E5%B9%82-%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E6%A8%A1/</guid>
      <description>&lt;h2 id=&#34;快速幂&#34;&gt;快速幂&lt;/h2&gt;
&lt;p&gt;求 x^m 一般方法是 xm = x * xm-1，这样需要做 m 次乘法，未免过慢。&lt;/p&gt;
&lt;p&gt;加速方法有两种。&lt;/p&gt;
&lt;p&gt;1.基于当 m 为偶数时， xm = (x2)^(m/2) ；当 m 为奇数时， xm = x * xm-1。显然当 m 为偶数时 m 会减半，当 m 为奇数时，下次就是偶数。m 可以很快收敛到 0.（^表示幂）&lt;/p&gt;
&lt;p&gt;2.将 m 看成二进制串 mkmk-1&amp;hellip;m1m0，那么 xm = xm0&lt;em&gt;2^0 + m1&lt;/em&gt;2^1 + &amp;hellip; + mk&lt;em&gt;2^k = xm0&lt;/em&gt;2^0 * xm1*2^1 _ &amp;hellip; _ xmk*2^k. mi 为 0 或 1，假设平均有一半 mi 为 1，即 k 个，那么总共才只需要做（k+(k/2)）次乘法。&lt;/p&gt;
&lt;p&gt;下面给出代码。第一个方法是加速方法 1，第二个方法是加速方法 1 的迭代形式，第三个方法是加速方法 2。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="快速幂">快速幂</h2>
<p>求 x^m 一般方法是 xm = x * xm-1，这样需要做 m 次乘法，未免过慢。</p>
<p>加速方法有两种。</p>
<p>1.基于当 m 为偶数时， xm = (x2)^(m/2) ；当 m 为奇数时， xm = x * xm-1。显然当 m 为偶数时 m 会减半，当 m 为奇数时，下次就是偶数。m 可以很快收敛到 0.（^表示幂）</p>
<p>2.将 m 看成二进制串 mkmk-1&hellip;m1m0，那么 xm = xm0<em>2^0 + m1</em>2^1 + &hellip; + mk<em>2^k = xm0</em>2^0 * xm1*2^1 _ &hellip; _ xmk*2^k. mi 为 0 或 1，假设平均有一半 mi 为 1，即 k 个，那么总共才只需要做（k+(k/2)）次乘法。</p>
<p>下面给出代码。第一个方法是加速方法 1，第二个方法是加速方法 1 的迭代形式，第三个方法是加速方法 2。</p>
<p>在网上看到有人将 *2 或 /2，改为移位运算，就说效率更高。这其实是扯谈。连我们都知道移位运算效率高，*2 和 /2 就是一个相当于移位运算的操作，做编译器的人会不知道？即使你写成 *2 或 /2，编译器也会帮你优化为移位运算。不相信的同学可以用 C 语言测试一下，只需将代码编译成汇编代码看看是否一样。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">pow</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">fastExp</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">m</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="k">return</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">//x^m = (x^2)^(m/2)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">fastExp</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="o">/</span><span class="n">2</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">//x^m = x * x(m-1)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">fastExp</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">m</span><span class="o">-</span><span class="n">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">fastExp_iter</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">m</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">result</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="n">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">x</span><span class="w"> </span><span class="o">*=</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">m</span><span class="w"> </span><span class="o">/=</span><span class="w"> </span><span class="n">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">else</span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">result</span><span class="w"> </span><span class="o">*=</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">m</span><span class="w"> </span><span class="o">--</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">fastExpBin</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">m</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">//x^m = x^(m0 * 2^0) * x^(m1 * 2^1) * x^(m2 * 2^2) * ... * x^(mk * 2^k)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">result</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">0</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="p">((</span><span class="n">m</span><span class="o">&amp;</span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">1</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">//m0 = 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">result</span><span class="w"> </span><span class="o">*=</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">//x对应每一位mi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">x</span><span class="w"> </span><span class="o">*=</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">m</span><span class="w"> </span><span class="o">&gt;&gt;=</span><span class="w"> </span><span class="n">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">result</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">){</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">print</span><span class="p">(</span><span class="n">fastExp</span><span class="p">(</span><span class="n">2</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34; &#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">print</span><span class="p">(</span><span class="n">fastExp_iter</span><span class="p">(</span><span class="n">2</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34; &#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">10</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">++</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">print</span><span class="p">(</span><span class="n">fastExpBin</span><span class="p">(</span><span class="n">2</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34; &#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="快速幂取模">快速幂取模</h2>
<p>与快速幂类似</p>
<p>只是在每次运算的时候要作 mod m 运算，利用的是模运算规则 (a _ b) mod m = ((a mod m) _ (b mod m)) mod m.</p>
<p>用快速幂取模的方法比直接求幂再取模的方法要快，因为将乘数限制在一定的范围。</p>
]]></content:encoded>
    </item>
    <item>
      <title>类 unix 系统下字符编码转换方法</title>
      <link>https://itibbers.com/posts/nix%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 22 Jun 2016 09:09:40 +0000</pubDate>
      <guid>https://itibbers.com/posts/nix%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;用 windows 的时候，如果把 gbk 转换为 utf8，有几个方法，一是记事本另存为，但是存在 BOM 的问题，另一种方法是通过不产生 BOM 的软件，如 vim，sublime 来 code 或保存，太过麻烦。&lt;/p&gt;
&lt;p&gt;今天无意中发现了 Mac 系统下，有个 iconv 的命令，可以非常方便的转换字符编码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iconv -f gbk -t utf-8 gbk.cpp &amp;gt; utf8.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配合管道输出，简直不能更方便。&lt;/p&gt;
&lt;p&gt;不光 Mac 系统有，所有类 unix 系统都有这个命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       iconv - character &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; conversion
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SYNOPSIS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       iconv &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;OPTION...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-f encoding&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-t encoding&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;inputfile ...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       iconv -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<p>用 windows 的时候，如果把 gbk 转换为 utf8，有几个方法，一是记事本另存为，但是存在 BOM 的问题，另一种方法是通过不产生 BOM 的软件，如 vim，sublime 来 code 或保存，太过麻烦。</p>
<p>今天无意中发现了 Mac 系统下，有个 iconv 的命令，可以非常方便的转换字符编码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">iconv -f gbk -t utf-8 gbk.cpp &gt; utf8.cpp
</span></span></code></pre></div><p>配合管道输出，简直不能更方便。</p>
<p>不光 Mac 系统有，所有类 unix 系统都有这个命令。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">NAME
</span></span><span class="line"><span class="cl">       iconv - character <span class="nb">set</span> conversion
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SYNOPSIS
</span></span><span class="line"><span class="cl">       iconv <span class="o">[</span>OPTION...<span class="o">]</span> <span class="o">[</span>-f encoding<span class="o">]</span> <span class="o">[</span>-t encoding<span class="o">]</span> <span class="o">[</span>inputfile ...<span class="o">]</span>
</span></span><span class="line"><span class="cl">       iconv -l
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Go-Pholcus抓人民网新闻规则</title>
      <link>https://itibbers.com/posts/go-pholcus%E7%88%AC%E8%99%AB%E8%A7%84%E5%88%99/</link>
      <pubDate>Thu, 21 Apr 2016 11:44:03 +0000</pubDate>
      <guid>https://itibbers.com/posts/go-pholcus%E7%88%AC%E8%99%AB%E8%A7%84%E5%88%99/</guid>
      <description>&lt;p&gt;Go 语言下有个爬虫软件 pholcus，写了个爬虫的规则，抓的是人民网的最新新闻和 IJGUC 所有期刊。
pholcus 开源软件做的还是挺棒的，但是觉得 go 语言不太好玩。
规则放到了&lt;a href=&#34;https://github.com/itibbers/pholcus-spider-lib&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Go 语言下有个爬虫软件 pholcus，写了个爬虫的规则，抓的是人民网的最新新闻和 IJGUC 所有期刊。
pholcus 开源软件做的还是挺棒的，但是觉得 go 语言不太好玩。
规则放到了<a href="https://github.com/itibbers/pholcus-spider-lib">Github</a></p>
<h3 id="人民网新闻">人民网新闻</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">spider_lib</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 基础包</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;github.com/PuerkitoBio/goquery&#34;                        //DOM解析</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;github.com/henrylee2cn/pholcus/app/downloader/request&#34;</span> <span class="c1">//必需</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;github.com/henrylee2cn/pholcus/logs&#34;               //信息输出</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span> <span class="s">&#34;github.com/henrylee2cn/pholcus/app/spider&#34;</span> <span class="c1">//必需</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// . &#34;github.com/henrylee2cn/pholcus/app/spider/common&#34; //选用</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// net包</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;net/http&#34; //设置http.Header</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;net/url&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 编码包</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;encoding/xml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 字符串处理包</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;regexp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;strconv&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;strings&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他包</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;math&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">People</span><span class="p">.</span><span class="nf">Register</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Item</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Id</span>       <span class="kt">string</span> <span class="s">`json:&#34;id&#34;`</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Title</span>    <span class="kt">string</span> <span class="s">`json:&#34;title&#34;`</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Url</span>      <span class="kt">string</span> <span class="s">`json:&#34;url&#34;`</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Date</span>     <span class="kt">string</span> <span class="s">`json:&#34;date&#34;`</span>
</span></span><span class="line"><span class="cl">    <span class="nx">NodeId</span>   <span class="kt">string</span> <span class="s">`json:&#34;nodeId&#34;`</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ImgCount</span> <span class="kt">string</span> <span class="s">`json:&#34;imgCount&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">News</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Items</span> <span class="p">[]</span><span class="nx">Item</span> <span class="s">`json:&#34;items&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">news</span> <span class="nx">News</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">People</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Spider</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Name</span><span class="p">:</span>        <span class="s">&#34;人民网新闻抓取&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Description</span><span class="p">:</span> <span class="s">&#34;人民网最新分类新闻&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Pausetime:    300,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Keyin:        KEYIN,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Limit:        LIMIT,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">EnableCookie</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">RuleTree</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">RuleTree</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Root</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ctx</span><span class="p">.</span><span class="nf">AddQueue</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">request</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Method</span><span class="p">:</span> <span class="s">&#34;GET&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Url</span><span class="p">:</span>    <span class="s">&#34;http://news.people.com.cn/210801/211150/index.js?cache=false&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Rule</span><span class="p">:</span>   <span class="s">&#34;新闻列表&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">Trunk</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Rule</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;新闻列表&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">ParseFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1">//query := ctx.GetDom()</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">//str := query.Find(&#34;body&#34;).Text()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1">//str := `{&#34;items&#34;:[{&#34;id&#34;:&#34;282&#34;,&#34;title&#34;:&#34;人社&amp;nbsp;转型升级&amp;quot;战术&amp;quot;手册&#34;,&#34;url&#34;:&#34;ht&#34;,&#34;date&#34;:&#34;201&#34;,&#34;nodeId&#34;:&#34;1001&#34;,&#34;imgCount&#34;:&#34;4&#34;}]}`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nx">str</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetText</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">news</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;解析错误： %v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="k">return</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">/////////////////</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">newsLength</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">news</span><span class="p">.</span><span class="nx">Items</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">newsLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">ctx</span><span class="p">.</span><span class="nf">AddQueue</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">request</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="nx">Url</span><span class="p">:</span>  <span class="nx">news</span><span class="p">.</span><span class="nx">Items</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Url</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="nx">Rule</span><span class="p">:</span> <span class="s">&#34;热点新闻&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="nx">Temp</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">                                <span class="s">&#34;id&#34;</span><span class="p">:</span>       <span class="nx">news</span><span class="p">.</span><span class="nx">Items</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="s">&#34;title&#34;</span><span class="p">:</span>    <span class="nx">news</span><span class="p">.</span><span class="nx">Items</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Title</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="s">&#34;date&#34;</span><span class="p">:</span>     <span class="nx">news</span><span class="p">.</span><span class="nx">Items</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Date</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="s">&#34;newsType&#34;</span><span class="p">:</span> <span class="nx">news</span><span class="p">.</span><span class="nx">Items</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">NodeId</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">})</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">/////////////////</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="s">&#34;热点新闻&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">//注意：有无字段语义和是否输出数据必须保持一致</span>
</span></span><span class="line"><span class="cl">                <span class="nx">ItemFields</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;ID&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;标题&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;内容&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;类别&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;ReleaseTime&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="nx">ParseFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">query</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetDom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1">// 获取内容</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">content</span> <span class="o">:=</span> <span class="nx">query</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">&#34;#p_content&#34;</span><span class="p">).</span><span class="nf">Text</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// re, _ := regexp.Compile(&#34;\\&lt;[\\S\\s]+?\\&gt;&#34;)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// content = re.ReplaceAllStringFunc(content, strings.ToLower)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// content = re.ReplaceAllString(content, &#34;&#34;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1">// 结果存入Response中转</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">ctx</span><span class="p">.</span><span class="nf">Output</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">0</span><span class="p">:</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetTemp</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">1</span><span class="p">:</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetTemp</span><span class="p">(</span><span class="s">&#34;title&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">2</span><span class="p">:</span> <span class="nx">content</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">3</span><span class="p">:</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetTemp</span><span class="p">(</span><span class="s">&#34;newsType&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">4</span><span class="p">:</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetTemp</span><span class="p">(</span><span class="s">&#34;date&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                    <span class="p">})</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="ijguc-期刊">IJGUC 期刊</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">spider_lib</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 基础包</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;log&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="s">&#34;github.com/PuerkitoBio/goquery&#34;</span>                        <span class="c1">//DOM解析</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;github.com/henrylee2cn/pholcus/app/downloader/request&#34;</span> <span class="c1">//必需</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span> <span class="s">&#34;github.com/henrylee2cn/pholcus/app/spider&#34;</span>           <span class="c1">//必需</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;github.com/henrylee2cn/pholcus/logs&#34;         //信息输出</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// . &#34;github.com/henrylee2cn/pholcus/app/spider/common&#34; //选用</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// net包</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;net/http&#34; //设置http.Header</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;net/url&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 编码包</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;encoding/xml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 字符串处理包</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;regexp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;strconv&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;strings&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他包</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;math&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// &#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">IJGUC</span><span class="p">.</span><span class="nf">Register</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">IJGUC</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Spider</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Name</span><span class="p">:</span>        <span class="s">&#34;IJGUC期刊&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Description</span><span class="p">:</span> <span class="s">&#34;IJGUC期刊&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Pausetime:    300,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Keyin:        KEYIN,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Limit:        LIMIT,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">EnableCookie</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">RuleTree</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">RuleTree</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Root</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ctx</span><span class="p">.</span><span class="nf">AddQueue</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">request</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Url</span><span class="p">:</span>  <span class="s">&#34;http://www.inderscience.com/info/inarticletoc.php?jcode=ijguc&amp;year=2016&amp;vol=7&amp;issue=1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Rule</span><span class="p">:</span> <span class="s">&#34;期刊列表&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">Trunk</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">Rule</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;期刊列表&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">ParseFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">query</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetDom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">id</span> <span class="o">:=</span> <span class="s">&#34;#eventbody&#34;</span> <span class="o">+</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#34; a&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">query</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="nx">id</span><span class="p">).</span><span class="nf">Each</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">j</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">s</span> <span class="o">*</span><span class="nx">goquery</span><span class="p">.</span><span class="nx">Selection</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="k">if</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Attr</span><span class="p">(</span><span class="s">&#34;href&#34;</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="c1">// log.Print(url)</span>
</span></span><span class="line"><span class="cl">                                <span class="nx">ctx</span><span class="p">.</span><span class="nf">AddQueue</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">request</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span><span class="nx">Url</span><span class="p">:</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">Rule</span><span class="p">:</span> <span class="s">&#34;文章列表&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">})</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;文章列表&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">ParseFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">query</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetDom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">//#journalcol1 article table tbody tr td:eq(1) table:eq(1) a</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">query</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">&#34;#journalcol1 article table tbody tr td&#34;</span><span class="p">).</span><span class="nf">Each</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">td</span> <span class="o">*</span><span class="nx">goquery</span><span class="p">.</span><span class="nx">Selection</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="nx">td</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">&#34;table&#34;</span><span class="p">).</span><span class="nf">Each</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">j</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">table</span> <span class="o">*</span><span class="nx">goquery</span><span class="p">.</span><span class="nx">Selection</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="k">if</span> <span class="nx">j</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nx">table</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">).</span><span class="nf">Each</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">k</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">a</span> <span class="o">*</span><span class="nx">goquery</span><span class="p">.</span><span class="nx">Selection</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                        <span class="k">if</span> <span class="nx">k</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                            <span class="k">if</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">.</span><span class="nf">Attr</span><span class="p">(</span><span class="s">&#34;href&#34;</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="c1">// log.Print(url)</span>
</span></span><span class="line"><span class="cl">                                                <span class="nx">ctx</span><span class="p">.</span><span class="nf">AddQueue</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">request</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span><span class="nx">Url</span><span class="p">:</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">Rule</span><span class="p">:</span> <span class="s">&#34;文章页&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">                                            <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">})</span>
</span></span><span class="line"><span class="cl">                                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                            <span class="p">})</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">})</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;文章页&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">//注意：有无字段语义和是否输出数据必须保持一致</span>
</span></span><span class="line"><span class="cl">                <span class="nx">ItemFields</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;Title&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;Author&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;Addresses&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;Journal&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;Abstract&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;Keywords&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;DOI&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="nx">ParseFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">query</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">GetDom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 获取内容</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">content</span> <span class="o">:=</span> <span class="nx">query</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">&#34;#col1&#34;</span><span class="p">).</span><span class="nf">Text</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1">// 过滤标签</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;\\&lt;[\\S\\s]+?\\&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">content</span> <span class="p">=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">ReplaceAllString</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1">// Title</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;Title:(.*?)Author:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">title</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">content</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// Author</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;Author:(.*?)Addresses:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">au</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="kd">var</span> <span class="nx">author</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">au</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">author</span> <span class="p">=</span> <span class="nx">au</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;Author:(.*?)Address:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">author</span> <span class="p">=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">content</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// Addresses &amp; Address</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;Addresses:(.*?)Journal:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">address</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="kd">var</span> <span class="nx">addresses</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">addresses</span> <span class="p">=</span> <span class="nx">address</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;Address:(.*?)Journal:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">addresses</span> <span class="p">=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">content</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// Journal</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;Journal:(.*?)Abstract:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">journal</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">content</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// Abstract</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;Abstract:(.*?)Keywords:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">abstract</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">content</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// Keywords</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;Keywords:(.*?)DOI:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">keywords</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">content</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// DOI</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;DOI: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">doiIndex</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatchIndex</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">rs</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">rune</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">left</span> <span class="o">:=</span> <span class="nx">doiIndex</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">right</span> <span class="o">:=</span> <span class="nx">left</span> <span class="o">+</span> <span class="mi">43</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">doi</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">rs</span><span class="p">[</span><span class="nx">left</span><span class="p">:</span><span class="nx">right</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1">// 结果存入Response中转</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">ctx</span><span class="p">.</span><span class="nf">Output</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">0</span><span class="p">:</span> <span class="nx">title</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">1</span><span class="p">:</span> <span class="nx">author</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">2</span><span class="p">:</span> <span class="nx">addresses</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">3</span><span class="p">:</span> <span class="nx">journal</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">4</span><span class="p">:</span> <span class="nx">abstract</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">5</span><span class="p">:</span> <span class="nx">keywords</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">6</span><span class="p">:</span> <span class="nx">doi</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="p">})</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Composer安装时openssl missing</title>
      <link>https://itibbers.com/posts/composer%E5%AE%89%E8%A3%85%E6%97%B6openssl-missing/</link>
      <pubDate>Tue, 15 Mar 2016 15:26:19 +0000</pubDate>
      <guid>https://itibbers.com/posts/composer%E5%AE%89%E8%A3%85%E6%97%B6openssl-missing/</guid>
      <description>&lt;p&gt;问题描述：“The openssl extension is missing, which means that secure HTTPS transfers are impossible.”&lt;/p&gt;
&lt;p&gt;确保 php.ini 中 extension=php_openssl.dll 打开。&lt;/p&gt;
&lt;p&gt;php.ini 文件在 apache 和 php 目录下都有，建议都打开。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>问题描述：“The openssl extension is missing, which means that secure HTTPS transfers are impossible.”</p>
<p>确保 php.ini 中 extension=php_openssl.dll 打开。</p>
<p>php.ini 文件在 apache 和 php 目录下都有，建议都打开。</p>
]]></content:encoded>
    </item>
    <item>
      <title>python - RuntimeError: maximum recursion depth exceeded</title>
      <link>https://itibbers.com/posts/python-runtimeerror-maximum-recursion-depth-exceeded/</link>
      <pubDate>Sun, 27 Sep 2015 21:55:42 +0000</pubDate>
      <guid>https://itibbers.com/posts/python-runtimeerror-maximum-recursion-depth-exceeded/</guid>
      <description>&lt;p&gt;用 Python 写了一个爬虫脚本，在抓取页面采用广度优先遍历抓取。但是当遍历到 900 多时就会出现莫名其妙的错误，通过 pdb 调试发现是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RuntimeError: maximum recursion depth exceeded&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在网上查了，发现 python 默认的递归深度是很有限的，大概是 900 多的样子，当递归深度超过这个值的时候，就会引发这样的一个异常。&lt;/p&gt;
&lt;p&gt;解决的方式是手工设置递归调用深度，方式为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setrecursionlimit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 例如这里设置为一百万&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<p>用 Python 写了一个爬虫脚本，在抓取页面采用广度优先遍历抓取。但是当遍历到 900 多时就会出现莫名其妙的错误，通过 pdb 调试发现是：</p>
<p><code>RuntimeError: maximum recursion depth exceeded</code></p>
<p>在网上查了，发现 python 默认的递归深度是很有限的，大概是 900 多的样子，当递归深度超过这个值的时候，就会引发这样的一个异常。</p>
<p>解决的方式是手工设置递归调用深度，方式为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">setrecursionlimit</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span> <span class="c1"># 例如这里设置为一百万</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>65279</title>
      <link>https://itibbers.com/posts/65279/</link>
      <pubDate>Thu, 13 Aug 2015 10:44:00 +0000</pubDate>
      <guid>https://itibbers.com/posts/65279/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;65279&#34; loading=&#34;lazy&#34; src=&#34;https://itibbers.com/images/65279.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你在修改文件后，发现网页上多了一个空行，不管怎么修改&lt;code&gt;margin&lt;/code&gt;,&lt;code&gt;padding&lt;/code&gt;都无法消除，但是审查元素的时候，发现多出一行&lt;code&gt;&amp;quot;&amp;amp;#65279&amp;quot;&lt;/code&gt;。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><img alt="65279" loading="lazy" src="/images/65279.png"></p>
<p>如果你在修改文件后，发现网页上多了一个空行，不管怎么修改<code>margin</code>,<code>padding</code>都无法消除，但是审查元素的时候，发现多出一行<code>&quot;&amp;#65279&quot;</code>。</p>
<p>注：IE 下是无法看到<code>65279</code>字样的，Firebug 和 Chrome 才可以看到。</p>
<p>这是由于文件保存的时候，在前面加入了 BOM 字符。
UTF-8 不需要 BOM 来表明字节顺序，但可以用 BOM 来表明编码方式。字符<code>ZERO WIDTH NO-BREAK SPACE</code>的编码是<code>EF BB BF</code>，如果接受者收到了三个不可见的字符（0xEF 0xBB 0xBF，即 BOM）开头的字节流，就知道这是 UTF-8 编码了。</p>
<p>WINDOWS 就是用 BOM 来标记文本文件的编码方式的。</p>
<p>现在几乎所有的文本编辑软件都可以显示并编辑 UTF-8 编码的文件。但是很遗憾，其中很多软件的表现并不理想。</p>
<p>对于一般的文件，这样并不会产生什么麻烦。但对于 PHP 来说，BOM 是个大麻烦。</p>
<p>PHP 并不会忽略 BOM，所以在读取、包含或者引用这些文件时，会把 BOM 作为该文件开头正文的一部分。根据嵌入式语言的特点，这串字符将被直接执行（显示）出来。由此造成即使页面的<code>padding-top</code>设置为 0，也无法让整个网页紧贴浏览器顶部，因为在 html 一开头有这 3 个字符呢！</p>
<p>最大的麻烦还不是这个。受 COOKIE 送出机制的限制，在这些文件开头已经有 BOM 的文件中，COOKIE 无法送出（因为在 COOKIE 送出前 PHP 已经送出了文件头），所以登入和登出功能失效。一切依赖 COOKIE、SESSION 实现的功能全部无效。
因此，在编辑、更改任何文本文件时，请务必使用不会乱加 BOM 的编辑器。Linux 下的编辑器应该都没有这个问题。WINDOWS 下，请勿使用记事本等编辑器。推荐的编辑器是：Sublime Text；Editplus 2.12 版本以上； EmEditor； UltraEdit（需要取消‘添加 BOM’的相关选项）； Dreamweaver（需要取消‘添加 BOM’的相关选项）等。
对于已经添加了 BOM 的文件，要取消的话，可以用以上编辑器另存一次。（Editplus 需要先另存为 gb，再另存为 UTF-8）</p>
<p><strong>2015/08/13 18:11 补充：</strong>
在前端显示，不光会占用一个空行，而且还会造成<code>&lt;/head&gt;&lt;body&gt;</code>标签的位移，让<code>&lt;meta&gt;</code>部分移动到<code>body</code>里面。原因未知。只能拿自己博客测试了 T.T 效果如图。</p>]]></content:encoded>
    </item>
  </channel>
</rss>
